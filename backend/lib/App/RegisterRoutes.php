<?php

/**
 * TRViS用 時刻表管理用API
 * PHP version 7.4
 *
 * @package dev_t0r
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

declare(strict_types=1);

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace dev_t0r\App;

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Slim\Exception\HttpNotImplementedException;

/**
 * RegisterRoutes Class Doc Comment
 *
 * @package dev_t0r
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
class RegisterRoutes
{
    /** @var array[] list of all api operations */
    private $operations = [
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractApiInfoApi',
            'userClassname' => 'ApiInfoApi',
            'operationId' => 'getApiInfo',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "APIの情報",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ApiInfo"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/auths',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractAuthApi',
            'userClassname' => 'AuthApi',
            'operationId' => 'issueToken',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "認証トークン発行成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/TokenResponse"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '403' => [
                    'jsonSchema' => '{
  "description" : "APIキーが期限切れ",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 403,
            "message" : "Expired API Key"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/work_groups/{workGroupId}/colors',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractColorApi',
            'userClassname' => 'ColorApi',
            'operationId' => 'createColor',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "作成成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Color"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "指定のWorkGroupが存在しない (Work以下のエンドポイントでのみ使用する)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/colors/{colorId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractColorApi',
            'userClassname' => 'ColorApi',
            'operationId' => 'deleteColor',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "削除成功"
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '403' => [
                    'jsonSchema' => '{
  "description" : "許可されていない操作を行おうとした",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 1403,
            "message" : "Not Allowed Command"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "ContentNotFound" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        },
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/colors/{colorId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractColorApi',
            'userClassname' => 'ColorApi',
            'operationId' => 'getColor',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "取得成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Color"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "ContentNotFound" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        },
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/work_groups/{workGroupId}/colors',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractColorApi',
            'userClassname' => 'ColorApi',
            'operationId' => 'getColorList',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "取得成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/ColorArray"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "指定のWorkGroupが存在しない (Work以下のエンドポイントでのみ使用する)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/colors/{colorId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractColorApi',
            'userClassname' => 'ColorApi',
            'operationId' => 'updateColor',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "更新成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Color"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "ContentNotFound" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        },
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/dump/{workGroupId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractDumpApi',
            'userClassname' => 'DumpApi',
            'operationId' => 'dumpTimetable',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "取得成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/TRViS_json_root"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/invite_keys',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractInviteKeyApi',
            'userClassname' => 'InviteKeyApi',
            'operationId' => 'getMyInviteKeyList',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "取得成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/InviteKeyArray"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/work_groups/{workGroupId}/invite_keys',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractInviteKeyApi',
            'userClassname' => 'InviteKeyApi',
            'operationId' => 'createInviteKey',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "作成成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/WorkGroup"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '403' => [
                    'jsonSchema' => '{
  "description" : "許可されていない操作を行おうとした",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 1403,
            "message" : "Not Allowed Command"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/invite_keys/{inviteKeyId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractInviteKeyApi',
            'userClassname' => 'InviteKeyApi',
            'operationId' => 'deleteInviteKey',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "無効化成功"
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '403' => [
                    'jsonSchema' => '{
  "description" : "許可されていない操作を行おうとした",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 1403,
            "message" : "Not Allowed Command"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/invite_keys/{inviteKeyId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractInviteKeyApi',
            'userClassname' => 'InviteKeyApi',
            'operationId' => 'getInviteKey',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "取得成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/InviteKey"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/work_groups/{workGroupId}/invite_keys',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractInviteKeyApi',
            'userClassname' => 'InviteKeyApi',
            'operationId' => 'getInviteKeyList',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "取得成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/InviteKeyArray"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/invite_keys/{inviteKeyId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractInviteKeyApi',
            'userClassname' => 'InviteKeyApi',
            'operationId' => 'updateInviteKey',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "更新成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/InviteKey"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/invite_keys/{inviteKeyId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractInviteKeyApi',
            'userClassname' => 'InviteKeyApi',
            'operationId' => 'useInviteKey',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/WorkGroup"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/work_groups/{workGroupId}/stations',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractStationApi',
            'userClassname' => 'StationApi',
            'operationId' => 'createStation',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "作成成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Station"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "指定のWorkGroupが存在しない (Work以下のエンドポイントでのみ使用する)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/stations/{stationId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractStationApi',
            'userClassname' => 'StationApi',
            'operationId' => 'deleteStation',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "削除成功"
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '403' => [
                    'jsonSchema' => '{
  "description" : "許可されていない操作を行おうとした",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 1403,
            "message" : "Not Allowed Command"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "ContentNotFound" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        },
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/stations/{stationId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractStationApi',
            'userClassname' => 'StationApi',
            'operationId' => 'getStation',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "取得成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Station"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "ContentNotFound" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        },
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/work_groups/{workGroupId}/stations',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractStationApi',
            'userClassname' => 'StationApi',
            'operationId' => 'getStationList',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "取得成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/StationArray"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "指定のWorkGroupが存在しない (Work以下のエンドポイントでのみ使用する)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/stations/{stationId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractStationApi',
            'userClassname' => 'StationApi',
            'operationId' => 'updateStation',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "更新成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Station"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "ContentNotFound" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        },
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/stations/{stationId}/tracks',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractStationTrackApi',
            'userClassname' => 'StationTrackApi',
            'operationId' => 'createStationTrack',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "作成成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/StationTrack"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "指定のWorkGroupが存在しない (Work以下のエンドポイントでのみ使用する)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/tracks/{stationTrackId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractStationTrackApi',
            'userClassname' => 'StationTrackApi',
            'operationId' => 'deleteStationTrack',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "削除成功"
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '403' => [
                    'jsonSchema' => '{
  "description" : "許可されていない操作を行おうとした",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 1403,
            "message" : "Not Allowed Command"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "ContentNotFound" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        },
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/tracks/{stationTrackId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractStationTrackApi',
            'userClassname' => 'StationTrackApi',
            'operationId' => 'getStationTrack',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "取得成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/StationTrack"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "ContentNotFound" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        },
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/stations/{stationId}/tracks',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractStationTrackApi',
            'userClassname' => 'StationTrackApi',
            'operationId' => 'getStationTrackList',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "取得成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/StationTrackArray"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "指定のWorkGroupが存在しない (Work以下のエンドポイントでのみ使用する)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/tracks/{stationTrackId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractStationTrackApi',
            'userClassname' => 'StationTrackApi',
            'operationId' => 'updateStationTrack',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "更新成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/StationTrack"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "ContentNotFound" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        },
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/trains/{trainId}/timetable_rows',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractTimetableRowApi',
            'userClassname' => 'TimetableRowApi',
            'operationId' => 'createTimetableRow',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "作成成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/TimetableRow"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "指定のWorkGroupが存在しない (Work以下のエンドポイントでのみ使用する)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/timetable_rows/{timetableRowId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractTimetableRowApi',
            'userClassname' => 'TimetableRowApi',
            'operationId' => 'deleteTimetableRow',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "削除成功"
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '403' => [
                    'jsonSchema' => '{
  "description" : "許可されていない操作を行おうとした",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 1403,
            "message" : "Not Allowed Command"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "ContentNotFound" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        },
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/timetable_rows/{timetableRowId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractTimetableRowApi',
            'userClassname' => 'TimetableRowApi',
            'operationId' => 'getTimetableRow',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "取得成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/TimetableRow"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "ContentNotFound" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        },
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/trains/{trainId}/timetable_rows',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractTimetableRowApi',
            'userClassname' => 'TimetableRowApi',
            'operationId' => 'getTimetableRowList',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "取得成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/TimetableRowArray"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "指定のWorkGroupが存在しない (Work以下のエンドポイントでのみ使用する)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/timetable_rows/{timetableRowId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractTimetableRowApi',
            'userClassname' => 'TimetableRowApi',
            'operationId' => 'updateTimetableRow',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "更新成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/TimetableRow"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "ContentNotFound" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        },
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/works/{workId}/trains',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractTrainApi',
            'userClassname' => 'TrainApi',
            'operationId' => 'createTrain',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "作成成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Train"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "指定のWorkGroupが存在しない (Work以下のエンドポイントでのみ使用する)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/trains/{trainId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractTrainApi',
            'userClassname' => 'TrainApi',
            'operationId' => 'deleteTrain',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "削除成功"
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '403' => [
                    'jsonSchema' => '{
  "description" : "許可されていない操作を行おうとした",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 1403,
            "message" : "Not Allowed Command"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "ContentNotFound" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        },
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/trains/{trainId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractTrainApi',
            'userClassname' => 'TrainApi',
            'operationId' => 'getTrain',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "取得成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Train"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "ContentNotFound" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        },
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/works/{workId}/trains',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractTrainApi',
            'userClassname' => 'TrainApi',
            'operationId' => 'getTrainList',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "取得成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/TrainArray"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "指定のWorkGroupが存在しない (Work以下のエンドポイントでのみ使用する)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/trains/{trainId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractTrainApi',
            'userClassname' => 'TrainApi',
            'operationId' => 'updateTrain',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "更新成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Train"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "ContentNotFound" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        },
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/work_groups/{workGroupId}/works',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractWorkApi',
            'userClassname' => 'WorkApi',
            'operationId' => 'createWork',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "作成成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Work"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "指定のWorkGroupが存在しない (Work以下のエンドポイントでのみ使用する)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/works/{workId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractWorkApi',
            'userClassname' => 'WorkApi',
            'operationId' => 'deleteWork',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "削除成功"
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '403' => [
                    'jsonSchema' => '{
  "description" : "許可されていない操作を行おうとした",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 1403,
            "message" : "Not Allowed Command"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "ContentNotFound" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        },
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/works/{workId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractWorkApi',
            'userClassname' => 'WorkApi',
            'operationId' => 'getWork',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "取得成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Work"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "ContentNotFound" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        },
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/work_groups/{workGroupId}/works',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractWorkApi',
            'userClassname' => 'WorkApi',
            'operationId' => 'getWorkList',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "取得成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/WorkArray"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "指定のWorkGroupが存在しない (Work以下のエンドポイントでのみ使用する)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/works/{workId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractWorkApi',
            'userClassname' => 'WorkApi',
            'operationId' => 'updateWork',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "更新成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Work"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "ContentNotFound" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        },
        "WorkGroupNotFound" : {
          "value" : {
            "code" : 1404,
            "message" : "Specified WorkGroup is not found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/work_groups',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractWorkGroupApi',
            'userClassname' => 'WorkGroupApi',
            'operationId' => 'createWorkGroup',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "作成成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/WorkGroup"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/work_groups',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractWorkGroupApi',
            'userClassname' => 'WorkGroupApi',
            'operationId' => 'getWorkGroupList',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "取得成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/WorkGroupArray"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/work_groups/{workGroupId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractWorkGroupApi',
            'userClassname' => 'WorkGroupApi',
            'operationId' => 'deleteWorkGroup',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "削除成功"
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '403' => [
                    'jsonSchema' => '{
  "description" : "許可されていない操作を行おうとした",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 1403,
            "message" : "Not Allowed Command"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/work_groups/{workGroupId}/privileges',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractWorkGroupApi',
            'userClassname' => 'WorkGroupApi',
            'operationId' => 'getPrivilege',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "取得成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/WorkGroupsPrivilege"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/work_groups/{workGroupId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractWorkGroupApi',
            'userClassname' => 'WorkGroupApi',
            'operationId' => 'getWorkGroup',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "取得成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/WorkGroup"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/work_groups/{workGroupId}/privileges',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractWorkGroupApi',
            'userClassname' => 'WorkGroupApi',
            'operationId' => 'updatePrivilege',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "更新成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/WorkGroupsPrivilege"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '403' => [
                    'jsonSchema' => '{
  "description" : "許可されていない操作を行おうとした",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 1403,
            "message" : "Not Allowed Command"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/work_groups/{workGroupId}',
            'apiPackage' => 'dev_t0r\trvis_backend\api',
            'classname' => 'AbstractWorkGroupApi',
            'userClassname' => 'WorkGroupApi',
            'operationId' => 'updateWorkGroup',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "更新成功",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/WorkGroup"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "リクエストが不正",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 400,
            "message" : "Bad Request"
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "認証トークンのエラー",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "TokenIsNotSet" : {
          "description" : "認証トークンがセットされていない場合",
          "value" : {
            "code" : 401,
            "message" : "Token is not set"
          }
        },
        "TokenIsExpired" : {
          "description" : "認証トークンが期限切れな場合",
          "value" : {
            "code" : 1401,
            "message" : "Token is expired"
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "コンテンツが存在しない",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/schema"
      },
      "examples" : {
        "example" : {
          "value" : {
            "code" : 404,
            "message" : "Content Not Found"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'bearerAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
    ];

    /**
     * Add routes to Slim app.
     *
     * @param \Slim\App $app Pre-configured Slim application instance
     *
     * @throws HttpNotImplementedException When implementation class doesn't exists
     */
    public function __invoke(\Slim\App $app): void
    {
        $app->options('/{routes:.*}', function (ServerRequestInterface $request, ResponseInterface $response) {
            // CORS Pre-Flight OPTIONS Request Handler
            return $response;
        });

        // create mock middleware factory
        /** @var \Psr\Container\ContainerInterface */
        $container = $app->getContainer();
        /** @var \OpenAPIServer\Mock\OpenApiDataMockerRouteMiddlewareFactory|null */
        $mockMiddlewareFactory = null;
        if ($container->has(\OpenAPIServer\Mock\OpenApiDataMockerRouteMiddlewareFactory::class)) {
            // I know, anti-pattern. Don't retrieve dependency directly from container
            $mockMiddlewareFactory = $container->get(\OpenAPIServer\Mock\OpenApiDataMockerRouteMiddlewareFactory::class);
        }

        foreach ($this->operations as $operation) {
            $callback = function (ServerRequestInterface $request) use ($operation) {
                $message = "How about extending {$operation['classname']} by {$operation['apiPackage']}\\{$operation['userClassname']} class implementing {$operation['operationId']} as a {$operation['httpMethod']} method?";
                throw new HttpNotImplementedException($request, $message);
            };
            $middlewares = [];

            if (class_exists("\\{$operation['apiPackage']}\\{$operation['userClassname']}")) {
                // Notice how we register the controller using the class name?
                // PHP-DI will instantiate the class for us only when it's actually necessary
                $callback = ["\\{$operation['apiPackage']}\\{$operation['userClassname']}", $operation['operationId']];
            }

            if ($mockMiddlewareFactory) {
                $mockSchemaResponses = array_map(function ($item) {
                    return json_decode($item['jsonSchema'], true);
                }, $operation['responses']);
                $middlewares[] = $mockMiddlewareFactory->create($mockSchemaResponses);
            }

            $route = $app->map(
                [$operation['httpMethod']],
                "{$operation['basePathWithoutHost']}{$operation['path']}",
                $callback
            )->setName($operation['operationId']);

            foreach ($middlewares as $middleware) {
                $route->add($middleware);
            }
        }
    }
}
