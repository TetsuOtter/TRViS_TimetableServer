/* tslint:disable */
/* eslint-disable */
/**
 * TRViS用 時刻表管理用API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TimetableRow
 */
export interface TimetableRow {
    /**
     * TimetableRowのID (UUID)
     * @type {string}
     * @memberof TimetableRow
     */
    readonly timetableRowsId?: string;
    /**
     * このデータが紐づいているTrainのID (UUID)
     * @type {string}
     * @memberof TimetableRow
     */
    readonly trainsId?: string;
    /**
     * この行の駅のID (UUID)
     * @type {string}
     * @memberof TimetableRow
     */
    stationsId?: string;
    /**
     * 駅の番線情報のID (UUID)
     * @type {string}
     * @memberof TimetableRow
     */
    stationTracksId?: string;
    /**
     * マーカーの色情報のID (UUID)
     * @type {string}
     * @memberof TimetableRow
     */
    colorsIdMarker?: string;
    /**
     * このTimetableRowの説明
     * @type {string}
     * @memberof TimetableRow
     */
    description?: string;
    /**
     * 作成日時
     * @type {Date}
     * @memberof TimetableRow
     */
    readonly createdAt?: Date;
    /**
     * 更新日時
     * @type {Date}
     * @memberof TimetableRow
     */
    readonly updatedAt?: Date;
    /**
     * 駅間運転時間 (分)
     * @type {number}
     * @memberof TimetableRow
     */
    driveTimeMm?: number;
    /**
     * 駅間運転時間 (秒)
     * @type {number}
     * @memberof TimetableRow
     */
    driveTimeSs?: number;
    /**
     * 運転停車かどうか
     * @type {boolean}
     * @memberof TimetableRow
     */
    isOperationOnlyStop?: boolean;
    /**
     * 通過駅かどうか
     * @type {boolean}
     * @memberof TimetableRow
     */
    isPass?: boolean;
    /**
     * 到着時刻に括弧を付けるかどうか
     * @type {boolean}
     * @memberof TimetableRow
     */
    hasBracket?: boolean;
    /**
     * 終着駅かどうか
     * @type {boolean}
     * @memberof TimetableRow
     */
    isLastStop?: boolean;
    /**
     * 到着時刻 (時)
     * @type {number}
     * @memberof TimetableRow
     */
    arriveTimeHh?: number;
    /**
     * 到着時刻 (分)
     * @type {number}
     * @memberof TimetableRow
     */
    arriveTimeMm?: number;
    /**
     * 到着時刻 (秒)
     * @type {number}
     * @memberof TimetableRow
     */
    arriveTimeSs?: number;
    /**
     * 出発時刻 (時)
     * @type {number}
     * @memberof TimetableRow
     */
    departureTimeHh?: number;
    /**
     * 出発時刻 (分)
     * @type {number}
     * @memberof TimetableRow
     */
    departureTimeMm?: number;
    /**
     * 出発時刻 (秒)
     * @type {number}
     * @memberof TimetableRow
     */
    departureTimeSs?: number;
    /**
     * 進入制限 (km/h)
     * @type {number}
     * @memberof TimetableRow
     */
    runInLimit?: number;
    /**
     * 進出制限 (km/h)
     * @type {number}
     * @memberof TimetableRow
     */
    runOutLimit?: number;
    /**
     * 注意事項
     * @type {string}
     * @memberof TimetableRow
     */
    remarks?: string;
    /**
     * 到着時刻欄に表示する文字列
     * @type {string}
     * @memberof TimetableRow
     */
    arriveStr?: string;
    /**
     * 出発時刻欄に表示する文字列
     * @type {string}
     * @memberof TimetableRow
     */
    departureStr?: string;
    /**
     * マーカー部分に表示する文字列
     * @type {string}
     * @memberof TimetableRow
     */
    markerText?: string;
    /**
     * 作業種別 (実装準備中)
     * @type {string}
     * @memberof TimetableRow
     */
    workType?: string;
}

/**
 * Check if a given object implements the TimetableRow interface.
 */
export function instanceOfTimetableRow(value: object): value is TimetableRow {
    return true;
}

export function TimetableRowFromJSON(json: any): TimetableRow {
    return TimetableRowFromJSONTyped(json, false);
}

export function TimetableRowFromJSONTyped(json: any, ignoreDiscriminator: boolean): TimetableRow {
    if (json == null) {
        return json;
    }
    return {
        
        'timetableRowsId': json['timetable_rows_id'] == null ? undefined : json['timetable_rows_id'],
        'trainsId': json['trains_id'] == null ? undefined : json['trains_id'],
        'stationsId': json['stations_id'] == null ? undefined : json['stations_id'],
        'stationTracksId': json['station_tracks_id'] == null ? undefined : json['station_tracks_id'],
        'colorsIdMarker': json['colors_id_marker'] == null ? undefined : json['colors_id_marker'],
        'description': json['description'] == null ? undefined : json['description'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'driveTimeMm': json['drive_time_mm'] == null ? undefined : json['drive_time_mm'],
        'driveTimeSs': json['drive_time_ss'] == null ? undefined : json['drive_time_ss'],
        'isOperationOnlyStop': json['is_operation_only_stop'] == null ? undefined : json['is_operation_only_stop'],
        'isPass': json['is_pass'] == null ? undefined : json['is_pass'],
        'hasBracket': json['has_bracket'] == null ? undefined : json['has_bracket'],
        'isLastStop': json['is_last_stop'] == null ? undefined : json['is_last_stop'],
        'arriveTimeHh': json['arrive_time_hh'] == null ? undefined : json['arrive_time_hh'],
        'arriveTimeMm': json['arrive_time_mm'] == null ? undefined : json['arrive_time_mm'],
        'arriveTimeSs': json['arrive_time_ss'] == null ? undefined : json['arrive_time_ss'],
        'departureTimeHh': json['departure_time_hh'] == null ? undefined : json['departure_time_hh'],
        'departureTimeMm': json['departure_time_mm'] == null ? undefined : json['departure_time_mm'],
        'departureTimeSs': json['departure_time_ss'] == null ? undefined : json['departure_time_ss'],
        'runInLimit': json['run_in_limit'] == null ? undefined : json['run_in_limit'],
        'runOutLimit': json['run_out_limit'] == null ? undefined : json['run_out_limit'],
        'remarks': json['remarks'] == null ? undefined : json['remarks'],
        'arriveStr': json['arrive_str'] == null ? undefined : json['arrive_str'],
        'departureStr': json['departure_str'] == null ? undefined : json['departure_str'],
        'markerText': json['marker_text'] == null ? undefined : json['marker_text'],
        'workType': json['work_type'] == null ? undefined : json['work_type'],
    };
}

export function TimetableRowToJSON(value?: Omit<TimetableRow, 'timetable_rows_id'|'trains_id'|'created_at'|'updated_at'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'stations_id': value['stationsId'],
        'station_tracks_id': value['stationTracksId'],
        'colors_id_marker': value['colorsIdMarker'],
        'description': value['description'],
        'drive_time_mm': value['driveTimeMm'],
        'drive_time_ss': value['driveTimeSs'],
        'is_operation_only_stop': value['isOperationOnlyStop'],
        'is_pass': value['isPass'],
        'has_bracket': value['hasBracket'],
        'is_last_stop': value['isLastStop'],
        'arrive_time_hh': value['arriveTimeHh'],
        'arrive_time_mm': value['arriveTimeMm'],
        'arrive_time_ss': value['arriveTimeSs'],
        'departure_time_hh': value['departureTimeHh'],
        'departure_time_mm': value['departureTimeMm'],
        'departure_time_ss': value['departureTimeSs'],
        'run_in_limit': value['runInLimit'],
        'run_out_limit': value['runOutLimit'],
        'remarks': value['remarks'],
        'arrive_str': value['arriveStr'],
        'departure_str': value['departureStr'],
        'marker_text': value['markerText'],
        'work_type': value['workType'],
    };
}

