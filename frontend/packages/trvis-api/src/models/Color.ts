/* tslint:disable */
/* eslint-disable */
/**
 * TRViS用 時刻表管理用API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ColorReal } from './ColorReal';
import {
    ColorRealFromJSON,
    ColorRealFromJSONTyped,
    ColorRealToJSON,
} from './ColorReal';
import type { Color8bit } from './Color8bit';
import {
    Color8bitFromJSON,
    Color8bitFromJSONTyped,
    Color8bitToJSON,
} from './Color8bit';

/**
 * 
 * @export
 * @interface Color
 */
export interface Color {
    /**
     * WorkGroupの説明
     * @type {string}
     * @memberof Color
     */
    description: string;
    /**
     * Colorの名前 (詳細な説明はdescriptionに書く)
     * @type {string}
     * @memberof Color
     */
    name: string;
    /**
     * 
     * @type {Color8bit}
     * @memberof Color
     */
    color8bit: Color8bit;
    /**
     * ColorのID (UUID)
     * @type {string}
     * @memberof Color
     */
    readonly colorsId?: string;
    /**
     * この色が属するWorkGroupのID (UUID)
     * @type {string}
     * @memberof Color
     */
    readonly workGroupsId?: string;
    /**
     * 作成日時
     * @type {Date}
     * @memberof Color
     */
    readonly createdAt?: Date;
    /**
     * 更新日時
     * @type {Date}
     * @memberof Color
     */
    readonly updatedAt?: Date;
    /**
     * 
     * @type {ColorReal}
     * @memberof Color
     */
    colorReal?: ColorReal;
}

/**
 * Check if a given object implements the Color interface.
 */
export function instanceOfColor(value: object): value is Color {
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('color8bit' in value) || value['color8bit'] === undefined) return false;
    return true;
}

export function ColorFromJSON(json: any): Color {
    return ColorFromJSONTyped(json, false);
}

export function ColorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Color {
    if (json == null) {
        return json;
    }
    return {
        
        'description': json['description'],
        'name': json['name'],
        'color8bit': Color8bitFromJSON(json['color_8bit']),
        'colorsId': json['colors_id'] == null ? undefined : json['colors_id'],
        'workGroupsId': json['work_groups_id'] == null ? undefined : json['work_groups_id'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'colorReal': json['color_real'] == null ? undefined : ColorRealFromJSON(json['color_real']),
    };
}

export function ColorToJSON(value?: Omit<Color, 'colors_id'|'work_groups_id'|'created_at'|'updated_at'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'description': value['description'],
        'name': value['name'],
        'color_8bit': Color8bitToJSON(value['color8bit']),
        'color_real': ColorRealToJSON(value['colorReal']),
    };
}

