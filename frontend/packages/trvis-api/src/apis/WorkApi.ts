/* tslint:disable */
/* eslint-disable */
/**
 * TRViS用 時刻表管理用API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Schema,
  Work,
} from '../models/index';
import {
    SchemaFromJSON,
    SchemaToJSON,
    WorkFromJSON,
    WorkToJSON,
} from '../models/index';

export interface CreateWorkRequest {
    workGroupId: string;
    work: Omit<Work, 'works_id'|'work_groups_id'|'created_at'>;
}

export interface DeleteWorkRequest {
    workId: string;
}

export interface GetWorkRequest {
    workId: string;
}

export interface GetWorkListRequest {
    workGroupId: string;
    p?: number;
    limit?: number;
    top?: string;
}

export interface UpdateWorkRequest {
    workId: string;
    work: Omit<Work, 'works_id'|'work_groups_id'|'created_at'>;
}

/**
 * WorkApi - interface
 * 
 * @export
 * @interface WorkApiInterface
 */
export interface WorkApiInterface {
    /**
     * 指定のWorkGroupに属する Work (仕業) を新しく作成する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * @summary 作成する
     * @param {string} workGroupId WorkGroupのID
     * @param {Work} work 作成するWorkの情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkApiInterface
     */
    createWorkRaw(requestParameters: CreateWorkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Work>>;

    /**
     * 指定のWorkGroupに属する Work (仕業) を新しく作成する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 作成する
     */
    createWork(requestParameters: CreateWorkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Work>;

    /**
     * 既存のWorkを削除する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * @summary 削除する
     * @param {string} workId WorkのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkApiInterface
     */
    deleteWorkRaw(requestParameters: DeleteWorkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 既存のWorkを削除する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 削除する
     */
    deleteWork(requestParameters: DeleteWorkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Work (仕業) の情報を1件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * @summary 1件取得する
     * @param {string} workId WorkのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkApiInterface
     */
    getWorkRaw(requestParameters: GetWorkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Work>>;

    /**
     * Work (仕業) の情報を1件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * 1件取得する
     */
    getWork(requestParameters: GetWorkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Work>;

    /**
     * 指定のWorkGroupに属するWork (仕業) の情報を複数件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * @summary 複数件取得する
     * @param {string} workGroupId WorkGroupのID
     * @param {number} [p] ページングを行う場合のページ番号
     * @param {number} [limit] ページングを行う場合の1ページあたりの件数
     * @param {string} [top] ページングを行う場合の一番上に表示するID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkApiInterface
     */
    getWorkListRaw(requestParameters: GetWorkListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Work>>>;

    /**
     * 指定のWorkGroupに属するWork (仕業) の情報を複数件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * 複数件取得する
     */
    getWorkList(requestParameters: GetWorkListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Work>>;

    /**
     * 既存のWorkの情報を更新する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * @summary 更新する
     * @param {string} workId WorkのID
     * @param {Work} work 更新後のWorkの情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkApiInterface
     */
    updateWorkRaw(requestParameters: UpdateWorkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Work>>;

    /**
     * 既存のWorkの情報を更新する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 更新する
     */
    updateWork(requestParameters: UpdateWorkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Work>;

}

/**
 * 
 */
export class WorkApi extends runtime.BaseAPI implements WorkApiInterface {

    /**
     * 指定のWorkGroupに属する Work (仕業) を新しく作成する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 作成する
     */
    async createWorkRaw(requestParameters: CreateWorkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Work>> {
        if (requestParameters['workGroupId'] == null) {
            throw new runtime.RequiredError(
                'workGroupId',
                'Required parameter "workGroupId" was null or undefined when calling createWork().'
            );
        }

        if (requestParameters['work'] == null) {
            throw new runtime.RequiredError(
                'work',
                'Required parameter "work" was null or undefined when calling createWork().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/work_groups/{workGroupId}/works`.replace(`{${"workGroupId"}}`, encodeURIComponent(String(requestParameters['workGroupId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkToJSON(requestParameters['work']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkFromJSON(jsonValue));
    }

    /**
     * 指定のWorkGroupに属する Work (仕業) を新しく作成する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 作成する
     */
    async createWork(requestParameters: CreateWorkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Work> {
        const response = await this.createWorkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 既存のWorkを削除する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 削除する
     */
    async deleteWorkRaw(requestParameters: DeleteWorkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['workId'] == null) {
            throw new runtime.RequiredError(
                'workId',
                'Required parameter "workId" was null or undefined when calling deleteWork().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/works/{workId}`.replace(`{${"workId"}}`, encodeURIComponent(String(requestParameters['workId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 既存のWorkを削除する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 削除する
     */
    async deleteWork(requestParameters: DeleteWorkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWorkRaw(requestParameters, initOverrides);
    }

    /**
     * Work (仕業) の情報を1件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * 1件取得する
     */
    async getWorkRaw(requestParameters: GetWorkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Work>> {
        if (requestParameters['workId'] == null) {
            throw new runtime.RequiredError(
                'workId',
                'Required parameter "workId" was null or undefined when calling getWork().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/works/{workId}`.replace(`{${"workId"}}`, encodeURIComponent(String(requestParameters['workId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkFromJSON(jsonValue));
    }

    /**
     * Work (仕業) の情報を1件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * 1件取得する
     */
    async getWork(requestParameters: GetWorkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Work> {
        const response = await this.getWorkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定のWorkGroupに属するWork (仕業) の情報を複数件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * 複数件取得する
     */
    async getWorkListRaw(requestParameters: GetWorkListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Work>>> {
        if (requestParameters['workGroupId'] == null) {
            throw new runtime.RequiredError(
                'workGroupId',
                'Required parameter "workGroupId" was null or undefined when calling getWorkList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['p'] != null) {
            queryParameters['p'] = requestParameters['p'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['top'] != null) {
            queryParameters['top'] = requestParameters['top'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/work_groups/{workGroupId}/works`.replace(`{${"workGroupId"}}`, encodeURIComponent(String(requestParameters['workGroupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkFromJSON));
    }

    /**
     * 指定のWorkGroupに属するWork (仕業) の情報を複数件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * 複数件取得する
     */
    async getWorkList(requestParameters: GetWorkListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Work>> {
        const response = await this.getWorkListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 既存のWorkの情報を更新する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 更新する
     */
    async updateWorkRaw(requestParameters: UpdateWorkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Work>> {
        if (requestParameters['workId'] == null) {
            throw new runtime.RequiredError(
                'workId',
                'Required parameter "workId" was null or undefined when calling updateWork().'
            );
        }

        if (requestParameters['work'] == null) {
            throw new runtime.RequiredError(
                'work',
                'Required parameter "work" was null or undefined when calling updateWork().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/works/{workId}`.replace(`{${"workId"}}`, encodeURIComponent(String(requestParameters['workId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WorkToJSON(requestParameters['work']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkFromJSON(jsonValue));
    }

    /**
     * 既存のWorkの情報を更新する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 更新する
     */
    async updateWork(requestParameters: UpdateWorkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Work> {
        const response = await this.updateWorkRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
