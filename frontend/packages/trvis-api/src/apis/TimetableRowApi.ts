/* tslint:disable */
/* eslint-disable */
/**
 * TRViS用 時刻表管理用API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Schema,
  TimetableRow,
} from '../models/index';
import {
    SchemaFromJSON,
    SchemaToJSON,
    TimetableRowFromJSON,
    TimetableRowToJSON,
} from '../models/index';

export interface CreateTimetableRowRequest {
    trainId: string;
    timetableRow: Omit<TimetableRow, 'timetable_rows_id'|'trains_id'|'created_at'|'updated_at'>;
}

export interface DeleteTimetableRowRequest {
    timetableRowId: string;
}

export interface GetTimetableRowRequest {
    timetableRowId: string;
}

export interface GetTimetableRowListRequest {
    trainId: string;
    p?: number;
    limit?: number;
    top?: string;
}

export interface UpdateTimetableRowRequest {
    timetableRowId: string;
    timetableRow: Omit<TimetableRow, 'timetable_rows_id'|'trains_id'|'created_at'|'updated_at'>;
}

/**
 * TimetableRowApi - interface
 * 
 * @export
 * @interface TimetableRowApiInterface
 */
export interface TimetableRowApiInterface {
    /**
     * 指定のTrainに属する TimetableRow を新しく作成する  属するWorkGroupへのWRITE権限が必要です。 
     * @summary 作成する
     * @param {string} trainId TrainのID
     * @param {TimetableRow} timetableRow 作成するTrainの情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimetableRowApiInterface
     */
    createTimetableRowRaw(requestParameters: CreateTimetableRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimetableRow>>;

    /**
     * 指定のTrainに属する TimetableRow を新しく作成する  属するWorkGroupへのWRITE権限が必要です。 
     * 作成する
     */
    createTimetableRow(requestParameters: CreateTimetableRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimetableRow>;

    /**
     * 既存のTimetableRowを削除する  属するWorkGroupへのWRITE権限が必要です。 
     * @summary 削除する
     * @param {string} timetableRowId Timetable RowのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimetableRowApiInterface
     */
    deleteTimetableRowRaw(requestParameters: DeleteTimetableRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 既存のTimetableRowを削除する  属するWorkGroupへのWRITE権限が必要です。 
     * 削除する
     */
    deleteTimetableRow(requestParameters: DeleteTimetableRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * TimetableRowを1件取得する  属するWorkGroupへのREAD権限が必要です。 
     * @summary 1件取得する
     * @param {string} timetableRowId Timetable RowのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimetableRowApiInterface
     */
    getTimetableRowRaw(requestParameters: GetTimetableRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimetableRow>>;

    /**
     * TimetableRowを1件取得する  属するWorkGroupへのREAD権限が必要です。 
     * 1件取得する
     */
    getTimetableRow(requestParameters: GetTimetableRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimetableRow>;

    /**
     * 指定のTrainに属するTimetableRowの情報を複数件取得する  属するWorkGroupへのREAD権限が必要です。 
     * @summary 複数件取得する
     * @param {string} trainId TrainのID
     * @param {number} [p] ページングを行う場合のページ番号
     * @param {number} [limit] ページングを行う場合の1ページあたりの件数
     * @param {string} [top] ページングを行う場合の一番上に表示するID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimetableRowApiInterface
     */
    getTimetableRowListRaw(requestParameters: GetTimetableRowListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TimetableRow>>>;

    /**
     * 指定のTrainに属するTimetableRowの情報を複数件取得する  属するWorkGroupへのREAD権限が必要です。 
     * 複数件取得する
     */
    getTimetableRowList(requestParameters: GetTimetableRowListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TimetableRow>>;

    /**
     * 既存のTimetableRowの情報を更新する  属するWorkGroupへのWRITE権限が必要です。 
     * @summary 更新する
     * @param {string} timetableRowId Timetable RowのID
     * @param {TimetableRow} timetableRow 更新後のTimetableRowの情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimetableRowApiInterface
     */
    updateTimetableRowRaw(requestParameters: UpdateTimetableRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimetableRow>>;

    /**
     * 既存のTimetableRowの情報を更新する  属するWorkGroupへのWRITE権限が必要です。 
     * 更新する
     */
    updateTimetableRow(requestParameters: UpdateTimetableRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimetableRow>;

}

/**
 * 
 */
export class TimetableRowApi extends runtime.BaseAPI implements TimetableRowApiInterface {

    /**
     * 指定のTrainに属する TimetableRow を新しく作成する  属するWorkGroupへのWRITE権限が必要です。 
     * 作成する
     */
    async createTimetableRowRaw(requestParameters: CreateTimetableRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimetableRow>> {
        if (requestParameters['trainId'] == null) {
            throw new runtime.RequiredError(
                'trainId',
                'Required parameter "trainId" was null or undefined when calling createTimetableRow().'
            );
        }

        if (requestParameters['timetableRow'] == null) {
            throw new runtime.RequiredError(
                'timetableRow',
                'Required parameter "timetableRow" was null or undefined when calling createTimetableRow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/trains/{trainId}/timetable_rows`.replace(`{${"trainId"}}`, encodeURIComponent(String(requestParameters['trainId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TimetableRowToJSON(requestParameters['timetableRow']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimetableRowFromJSON(jsonValue));
    }

    /**
     * 指定のTrainに属する TimetableRow を新しく作成する  属するWorkGroupへのWRITE権限が必要です。 
     * 作成する
     */
    async createTimetableRow(requestParameters: CreateTimetableRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimetableRow> {
        const response = await this.createTimetableRowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 既存のTimetableRowを削除する  属するWorkGroupへのWRITE権限が必要です。 
     * 削除する
     */
    async deleteTimetableRowRaw(requestParameters: DeleteTimetableRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['timetableRowId'] == null) {
            throw new runtime.RequiredError(
                'timetableRowId',
                'Required parameter "timetableRowId" was null or undefined when calling deleteTimetableRow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/timetable_rows/{timetableRowId}`.replace(`{${"timetableRowId"}}`, encodeURIComponent(String(requestParameters['timetableRowId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 既存のTimetableRowを削除する  属するWorkGroupへのWRITE権限が必要です。 
     * 削除する
     */
    async deleteTimetableRow(requestParameters: DeleteTimetableRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTimetableRowRaw(requestParameters, initOverrides);
    }

    /**
     * TimetableRowを1件取得する  属するWorkGroupへのREAD権限が必要です。 
     * 1件取得する
     */
    async getTimetableRowRaw(requestParameters: GetTimetableRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimetableRow>> {
        if (requestParameters['timetableRowId'] == null) {
            throw new runtime.RequiredError(
                'timetableRowId',
                'Required parameter "timetableRowId" was null or undefined when calling getTimetableRow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/timetable_rows/{timetableRowId}`.replace(`{${"timetableRowId"}}`, encodeURIComponent(String(requestParameters['timetableRowId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimetableRowFromJSON(jsonValue));
    }

    /**
     * TimetableRowを1件取得する  属するWorkGroupへのREAD権限が必要です。 
     * 1件取得する
     */
    async getTimetableRow(requestParameters: GetTimetableRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimetableRow> {
        const response = await this.getTimetableRowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定のTrainに属するTimetableRowの情報を複数件取得する  属するWorkGroupへのREAD権限が必要です。 
     * 複数件取得する
     */
    async getTimetableRowListRaw(requestParameters: GetTimetableRowListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TimetableRow>>> {
        if (requestParameters['trainId'] == null) {
            throw new runtime.RequiredError(
                'trainId',
                'Required parameter "trainId" was null or undefined when calling getTimetableRowList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['p'] != null) {
            queryParameters['p'] = requestParameters['p'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['top'] != null) {
            queryParameters['top'] = requestParameters['top'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/trains/{trainId}/timetable_rows`.replace(`{${"trainId"}}`, encodeURIComponent(String(requestParameters['trainId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimetableRowFromJSON));
    }

    /**
     * 指定のTrainに属するTimetableRowの情報を複数件取得する  属するWorkGroupへのREAD権限が必要です。 
     * 複数件取得する
     */
    async getTimetableRowList(requestParameters: GetTimetableRowListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TimetableRow>> {
        const response = await this.getTimetableRowListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 既存のTimetableRowの情報を更新する  属するWorkGroupへのWRITE権限が必要です。 
     * 更新する
     */
    async updateTimetableRowRaw(requestParameters: UpdateTimetableRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimetableRow>> {
        if (requestParameters['timetableRowId'] == null) {
            throw new runtime.RequiredError(
                'timetableRowId',
                'Required parameter "timetableRowId" was null or undefined when calling updateTimetableRow().'
            );
        }

        if (requestParameters['timetableRow'] == null) {
            throw new runtime.RequiredError(
                'timetableRow',
                'Required parameter "timetableRow" was null or undefined when calling updateTimetableRow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/timetable_rows/{timetableRowId}`.replace(`{${"timetableRowId"}}`, encodeURIComponent(String(requestParameters['timetableRowId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TimetableRowToJSON(requestParameters['timetableRow']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimetableRowFromJSON(jsonValue));
    }

    /**
     * 既存のTimetableRowの情報を更新する  属するWorkGroupへのWRITE権限が必要です。 
     * 更新する
     */
    async updateTimetableRow(requestParameters: UpdateTimetableRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimetableRow> {
        const response = await this.updateTimetableRowRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
