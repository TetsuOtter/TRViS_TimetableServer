/* tslint:disable */
/* eslint-disable */
/**
 * TRViS用 時刻表管理用API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Schema,
  Train,
} from '../models/index';
import {
    SchemaFromJSON,
    SchemaToJSON,
    TrainFromJSON,
    TrainToJSON,
} from '../models/index';

export interface CreateTrainRequest {
    workId: string;
    train: Omit<Train, 'trains_id'|'works_id'|'created_at'>;
}

export interface DeleteTrainRequest {
    trainId: string;
}

export interface GetTrainRequest {
    trainId: string;
}

export interface GetTrainListRequest {
    workId: string;
    p?: number;
    limit?: number;
    top?: string;
}

export interface UpdateTrainRequest {
    trainId: string;
    train: Omit<Train, 'trains_id'|'works_id'|'created_at'>;
}

/**
 * TrainApi - interface
 * 
 * @export
 * @interface TrainApiInterface
 */
export interface TrainApiInterface {
    /**
     * 指定のWorkに属する Train (列車) を新しく作成する  属するWorkGroupへのWRITE権限が必要です。 
     * @summary 作成する
     * @param {string} workId WorkのID
     * @param {Train} train 作成するTrainの情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainApiInterface
     */
    createTrainRaw(requestParameters: CreateTrainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Train>>;

    /**
     * 指定のWorkに属する Train (列車) を新しく作成する  属するWorkGroupへのWRITE権限が必要です。 
     * 作成する
     */
    createTrain(requestParameters: CreateTrainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Train>;

    /**
     * 既存のTrainを削除する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * @summary 削除する
     * @param {string} trainId TrainのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainApiInterface
     */
    deleteTrainRaw(requestParameters: DeleteTrainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 既存のTrainを削除する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 削除する
     */
    deleteTrain(requestParameters: DeleteTrainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Train (列車) の情報を1件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * @summary 1件取得する
     * @param {string} trainId TrainのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainApiInterface
     */
    getTrainRaw(requestParameters: GetTrainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Train>>;

    /**
     * Train (列車) の情報を1件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * 1件取得する
     */
    getTrain(requestParameters: GetTrainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Train>;

    /**
     * 指定のWorkに属するTrain (列車) の情報を複数件取得する  属するWorkGroupへのREAD権限が必要です。 
     * @summary 複数件取得する
     * @param {string} workId WorkのID
     * @param {number} [p] ページングを行う場合のページ番号
     * @param {number} [limit] ページングを行う場合の1ページあたりの件数
     * @param {string} [top] ページングを行う場合の一番上に表示するID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainApiInterface
     */
    getTrainListRaw(requestParameters: GetTrainListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Train>>>;

    /**
     * 指定のWorkに属するTrain (列車) の情報を複数件取得する  属するWorkGroupへのREAD権限が必要です。 
     * 複数件取得する
     */
    getTrainList(requestParameters: GetTrainListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Train>>;

    /**
     * 既存のTrainの情報を更新する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * @summary 更新する
     * @param {string} trainId TrainのID
     * @param {Train} train 更新後のWorkの情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainApiInterface
     */
    updateTrainRaw(requestParameters: UpdateTrainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Train>>;

    /**
     * 既存のTrainの情報を更新する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 更新する
     */
    updateTrain(requestParameters: UpdateTrainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Train>;

}

/**
 * 
 */
export class TrainApi extends runtime.BaseAPI implements TrainApiInterface {

    /**
     * 指定のWorkに属する Train (列車) を新しく作成する  属するWorkGroupへのWRITE権限が必要です。 
     * 作成する
     */
    async createTrainRaw(requestParameters: CreateTrainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Train>> {
        if (requestParameters['workId'] == null) {
            throw new runtime.RequiredError(
                'workId',
                'Required parameter "workId" was null or undefined when calling createTrain().'
            );
        }

        if (requestParameters['train'] == null) {
            throw new runtime.RequiredError(
                'train',
                'Required parameter "train" was null or undefined when calling createTrain().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/works/{workId}/trains`.replace(`{${"workId"}}`, encodeURIComponent(String(requestParameters['workId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrainToJSON(requestParameters['train']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrainFromJSON(jsonValue));
    }

    /**
     * 指定のWorkに属する Train (列車) を新しく作成する  属するWorkGroupへのWRITE権限が必要です。 
     * 作成する
     */
    async createTrain(requestParameters: CreateTrainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Train> {
        const response = await this.createTrainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 既存のTrainを削除する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 削除する
     */
    async deleteTrainRaw(requestParameters: DeleteTrainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['trainId'] == null) {
            throw new runtime.RequiredError(
                'trainId',
                'Required parameter "trainId" was null or undefined when calling deleteTrain().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/trains/{trainId}`.replace(`{${"trainId"}}`, encodeURIComponent(String(requestParameters['trainId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 既存のTrainを削除する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 削除する
     */
    async deleteTrain(requestParameters: DeleteTrainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTrainRaw(requestParameters, initOverrides);
    }

    /**
     * Train (列車) の情報を1件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * 1件取得する
     */
    async getTrainRaw(requestParameters: GetTrainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Train>> {
        if (requestParameters['trainId'] == null) {
            throw new runtime.RequiredError(
                'trainId',
                'Required parameter "trainId" was null or undefined when calling getTrain().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/trains/{trainId}`.replace(`{${"trainId"}}`, encodeURIComponent(String(requestParameters['trainId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrainFromJSON(jsonValue));
    }

    /**
     * Train (列車) の情報を1件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * 1件取得する
     */
    async getTrain(requestParameters: GetTrainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Train> {
        const response = await this.getTrainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定のWorkに属するTrain (列車) の情報を複数件取得する  属するWorkGroupへのREAD権限が必要です。 
     * 複数件取得する
     */
    async getTrainListRaw(requestParameters: GetTrainListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Train>>> {
        if (requestParameters['workId'] == null) {
            throw new runtime.RequiredError(
                'workId',
                'Required parameter "workId" was null or undefined when calling getTrainList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['p'] != null) {
            queryParameters['p'] = requestParameters['p'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['top'] != null) {
            queryParameters['top'] = requestParameters['top'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/works/{workId}/trains`.replace(`{${"workId"}}`, encodeURIComponent(String(requestParameters['workId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrainFromJSON));
    }

    /**
     * 指定のWorkに属するTrain (列車) の情報を複数件取得する  属するWorkGroupへのREAD権限が必要です。 
     * 複数件取得する
     */
    async getTrainList(requestParameters: GetTrainListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Train>> {
        const response = await this.getTrainListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 既存のTrainの情報を更新する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 更新する
     */
    async updateTrainRaw(requestParameters: UpdateTrainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Train>> {
        if (requestParameters['trainId'] == null) {
            throw new runtime.RequiredError(
                'trainId',
                'Required parameter "trainId" was null or undefined when calling updateTrain().'
            );
        }

        if (requestParameters['train'] == null) {
            throw new runtime.RequiredError(
                'train',
                'Required parameter "train" was null or undefined when calling updateTrain().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/trains/{trainId}`.replace(`{${"trainId"}}`, encodeURIComponent(String(requestParameters['trainId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TrainToJSON(requestParameters['train']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrainFromJSON(jsonValue));
    }

    /**
     * 既存のTrainの情報を更新する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 更新する
     */
    async updateTrain(requestParameters: UpdateTrainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Train> {
        const response = await this.updateTrainRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
