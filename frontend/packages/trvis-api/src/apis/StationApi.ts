/* tslint:disable */
/* eslint-disable */
/**
 * TRViS用 時刻表管理用API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Schema,
  Station,
} from '../models/index';
import {
    SchemaFromJSON,
    SchemaToJSON,
    StationFromJSON,
    StationToJSON,
} from '../models/index';

export interface CreateStationRequest {
    workGroupId: string;
    station: Omit<Station, 'stations_id'|'work_groups_id'|'created_at'>;
}

export interface DeleteStationRequest {
    stationId: string;
}

export interface GetStationRequest {
    stationId: string;
}

export interface GetStationListRequest {
    workGroupId: string;
    p?: number;
    limit?: number;
    top?: string;
}

export interface UpdateStationRequest {
    stationId: string;
    station: Omit<Station, 'stations_id'|'work_groups_id'|'created_at'>;
}

/**
 * StationApi - interface
 * 
 * @export
 * @interface StationApiInterface
 */
export interface StationApiInterface {
    /**
     * 指定のWorkGroupに属する Station (駅) を新しく作成する  属するWorkGroupへのWRITE権限が必要です。 
     * @summary 作成する
     * @param {string} workGroupId WorkGroupのID
     * @param {Station} station 作成するStationの情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationApiInterface
     */
    createStationRaw(requestParameters: CreateStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Station>>;

    /**
     * 指定のWorkGroupに属する Station (駅) を新しく作成する  属するWorkGroupへのWRITE権限が必要です。 
     * 作成する
     */
    createStation(requestParameters: CreateStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Station>;

    /**
     * 既存のStationを削除する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * @summary 削除する
     * @param {string} stationId StationのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationApiInterface
     */
    deleteStationRaw(requestParameters: DeleteStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 既存のStationを削除する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 削除する
     */
    deleteStation(requestParameters: DeleteStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Station (駅) の情報を1件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * @summary 1件取得する
     * @param {string} stationId StationのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationApiInterface
     */
    getStationRaw(requestParameters: GetStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Station>>;

    /**
     * Station (駅) の情報を1件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * 1件取得する
     */
    getStation(requestParameters: GetStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Station>;

    /**
     * 指定のWorkGroupに属するStation (駅) の情報を複数件取得する  属するWorkGroupへのREAD権限が必要です。 
     * @summary 複数件取得する
     * @param {string} workGroupId WorkGroupのID
     * @param {number} [p] ページングを行う場合のページ番号
     * @param {number} [limit] ページングを行う場合の1ページあたりの件数
     * @param {string} [top] ページングを行う場合の一番上に表示するID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationApiInterface
     */
    getStationListRaw(requestParameters: GetStationListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Station>>>;

    /**
     * 指定のWorkGroupに属するStation (駅) の情報を複数件取得する  属するWorkGroupへのREAD権限が必要です。 
     * 複数件取得する
     */
    getStationList(requestParameters: GetStationListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Station>>;

    /**
     * 既存のStationの情報を更新する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * @summary 更新する
     * @param {string} stationId StationのID
     * @param {Station} station 更新後のStationの情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationApiInterface
     */
    updateStationRaw(requestParameters: UpdateStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Station>>;

    /**
     * 既存のStationの情報を更新する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 更新する
     */
    updateStation(requestParameters: UpdateStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Station>;

}

/**
 * 
 */
export class StationApi extends runtime.BaseAPI implements StationApiInterface {

    /**
     * 指定のWorkGroupに属する Station (駅) を新しく作成する  属するWorkGroupへのWRITE権限が必要です。 
     * 作成する
     */
    async createStationRaw(requestParameters: CreateStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Station>> {
        if (requestParameters['workGroupId'] == null) {
            throw new runtime.RequiredError(
                'workGroupId',
                'Required parameter "workGroupId" was null or undefined when calling createStation().'
            );
        }

        if (requestParameters['station'] == null) {
            throw new runtime.RequiredError(
                'station',
                'Required parameter "station" was null or undefined when calling createStation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/work_groups/{workGroupId}/stations`.replace(`{${"workGroupId"}}`, encodeURIComponent(String(requestParameters['workGroupId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StationToJSON(requestParameters['station']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StationFromJSON(jsonValue));
    }

    /**
     * 指定のWorkGroupに属する Station (駅) を新しく作成する  属するWorkGroupへのWRITE権限が必要です。 
     * 作成する
     */
    async createStation(requestParameters: CreateStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Station> {
        const response = await this.createStationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 既存のStationを削除する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 削除する
     */
    async deleteStationRaw(requestParameters: DeleteStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['stationId'] == null) {
            throw new runtime.RequiredError(
                'stationId',
                'Required parameter "stationId" was null or undefined when calling deleteStation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stations/{stationId}`.replace(`{${"stationId"}}`, encodeURIComponent(String(requestParameters['stationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 既存のStationを削除する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 削除する
     */
    async deleteStation(requestParameters: DeleteStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteStationRaw(requestParameters, initOverrides);
    }

    /**
     * Station (駅) の情報を1件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * 1件取得する
     */
    async getStationRaw(requestParameters: GetStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Station>> {
        if (requestParameters['stationId'] == null) {
            throw new runtime.RequiredError(
                'stationId',
                'Required parameter "stationId" was null or undefined when calling getStation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stations/{stationId}`.replace(`{${"stationId"}}`, encodeURIComponent(String(requestParameters['stationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StationFromJSON(jsonValue));
    }

    /**
     * Station (駅) の情報を1件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * 1件取得する
     */
    async getStation(requestParameters: GetStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Station> {
        const response = await this.getStationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定のWorkGroupに属するStation (駅) の情報を複数件取得する  属するWorkGroupへのREAD権限が必要です。 
     * 複数件取得する
     */
    async getStationListRaw(requestParameters: GetStationListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Station>>> {
        if (requestParameters['workGroupId'] == null) {
            throw new runtime.RequiredError(
                'workGroupId',
                'Required parameter "workGroupId" was null or undefined when calling getStationList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['p'] != null) {
            queryParameters['p'] = requestParameters['p'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['top'] != null) {
            queryParameters['top'] = requestParameters['top'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/work_groups/{workGroupId}/stations`.replace(`{${"workGroupId"}}`, encodeURIComponent(String(requestParameters['workGroupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StationFromJSON));
    }

    /**
     * 指定のWorkGroupに属するStation (駅) の情報を複数件取得する  属するWorkGroupへのREAD権限が必要です。 
     * 複数件取得する
     */
    async getStationList(requestParameters: GetStationListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Station>> {
        const response = await this.getStationListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 既存のStationの情報を更新する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 更新する
     */
    async updateStationRaw(requestParameters: UpdateStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Station>> {
        if (requestParameters['stationId'] == null) {
            throw new runtime.RequiredError(
                'stationId',
                'Required parameter "stationId" was null or undefined when calling updateStation().'
            );
        }

        if (requestParameters['station'] == null) {
            throw new runtime.RequiredError(
                'station',
                'Required parameter "station" was null or undefined when calling updateStation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stations/{stationId}`.replace(`{${"stationId"}}`, encodeURIComponent(String(requestParameters['stationId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StationToJSON(requestParameters['station']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StationFromJSON(jsonValue));
    }

    /**
     * 既存のStationの情報を更新する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 更新する
     */
    async updateStation(requestParameters: UpdateStationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Station> {
        const response = await this.updateStationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
