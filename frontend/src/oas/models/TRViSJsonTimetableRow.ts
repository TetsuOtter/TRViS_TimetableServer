/* tslint:disable */
/* eslint-disable */
/**
 * TRViS用 時刻表管理用API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TRViSJsonTimetableRow
 */
export interface TRViSJsonTimetableRow {
    /**
     * 駅名 (4文字まで)
     * @type {string}
     * @memberof TRViSJsonTimetableRow
     */
    stationName: string;
    /**
     * 駅の位置 (m)
     * @type {number}
     * @memberof TRViSJsonTimetableRow
     */
    locationM: number;
    /**
     * 駅の経度 (度)
     * @type {number}
     * @memberof TRViSJsonTimetableRow
     */
    longitudeDeg?: number | null;
    /**
     * 駅の緯度 (度)
     * @type {number}
     * @memberof TRViSJsonTimetableRow
     */
    latitudeDeg?: number | null;
    /**
     * その駅にいるかどうかを判定する円の半径 (m)
     * @type {number}
     * @memberof TRViSJsonTimetableRow
     */
    onStationDetectRadiusM?: number | null;
    /**
     * 駅のフルネーム
     * @type {string}
     * @memberof TRViSJsonTimetableRow
     */
    fullName?: string | null;
    /**
     * 駅の種類
     * @type {number}
     * @memberof TRViSJsonTimetableRow
     */
    recordType?: number;
    /**
     * 駅の番線名
     * @type {string}
     * @memberof TRViSJsonTimetableRow
     */
    trackName?: string | null;
    /**
     * 駅間運転時間 (分)
     * @type {number}
     * @memberof TRViSJsonTimetableRow
     */
    driveTimeMM?: number;
    /**
     * 駅間運転時間 (秒)
     * @type {number}
     * @memberof TRViSJsonTimetableRow
     */
    driveTimeSS?: number;
    /**
     * 運転停車かどうか
     * @type {boolean}
     * @memberof TRViSJsonTimetableRow
     */
    isOperationOnlyStop?: boolean;
    /**
     * 通過駅かどうか
     * @type {boolean}
     * @memberof TRViSJsonTimetableRow
     */
    isPass?: boolean;
    /**
     * 到着時刻に括弧を付けるかどうか
     * @type {boolean}
     * @memberof TRViSJsonTimetableRow
     */
    hasBracket?: boolean;
    /**
     * 終着駅かどうか
     * @type {boolean}
     * @memberof TRViSJsonTimetableRow
     */
    isLastStop?: boolean;
    /**
     * 到着時刻
     * @type {string}
     * @memberof TRViSJsonTimetableRow
     */
    arrive?: string;
    /**
     * 出発時刻
     * @type {string}
     * @memberof TRViSJsonTimetableRow
     */
    departure?: string;
    /**
     * 進入制限 (km/h)
     * @type {number}
     * @memberof TRViSJsonTimetableRow
     */
    runInLimit?: number;
    /**
     * 進出制限 (km/h)
     * @type {number}
     * @memberof TRViSJsonTimetableRow
     */
    runOutLimit?: number;
    /**
     * 注意事項
     * @type {string}
     * @memberof TRViSJsonTimetableRow
     */
    remarks?: string;
    /**
     * マーカーの色
     * @type {string}
     * @memberof TRViSJsonTimetableRow
     */
    markerColor?: string;
    /**
     * マーカー部分に表示する文字列
     * @type {string}
     * @memberof TRViSJsonTimetableRow
     */
    markerText?: string;
    /**
     * 作業種別 (実装準備中)
     * @type {number}
     * @memberof TRViSJsonTimetableRow
     */
    workType?: number;
}

/**
 * Check if a given object implements the TRViSJsonTimetableRow interface.
 */
export function instanceOfTRViSJsonTimetableRow(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "stationName" in value;
    isInstance = isInstance && "locationM" in value;

    return isInstance;
}

export function TRViSJsonTimetableRowFromJSON(json: any): TRViSJsonTimetableRow {
    return TRViSJsonTimetableRowFromJSONTyped(json, false);
}

export function TRViSJsonTimetableRowFromJSONTyped(json: any, ignoreDiscriminator: boolean): TRViSJsonTimetableRow {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'stationName': json['StationName'],
        'locationM': json['Location_m'],
        'longitudeDeg': !exists(json, 'Longitude_deg') ? undefined : json['Longitude_deg'],
        'latitudeDeg': !exists(json, 'Latitude_deg') ? undefined : json['Latitude_deg'],
        'onStationDetectRadiusM': !exists(json, 'OnStationDetectRadius_m') ? undefined : json['OnStationDetectRadius_m'],
        'fullName': !exists(json, 'FullName') ? undefined : json['FullName'],
        'recordType': !exists(json, 'RecordType') ? undefined : json['RecordType'],
        'trackName': !exists(json, 'TrackName') ? undefined : json['TrackName'],
        'driveTimeMM': !exists(json, 'DriveTime_MM') ? undefined : json['DriveTime_MM'],
        'driveTimeSS': !exists(json, 'DriveTime_SS') ? undefined : json['DriveTime_SS'],
        'isOperationOnlyStop': !exists(json, 'IsOperationOnlyStop') ? undefined : json['IsOperationOnlyStop'],
        'isPass': !exists(json, 'IsPass') ? undefined : json['IsPass'],
        'hasBracket': !exists(json, 'HasBracket') ? undefined : json['HasBracket'],
        'isLastStop': !exists(json, 'IsLastStop') ? undefined : json['IsLastStop'],
        'arrive': !exists(json, 'Arrive') ? undefined : json['Arrive'],
        'departure': !exists(json, 'Departure') ? undefined : json['Departure'],
        'runInLimit': !exists(json, 'RunInLimit') ? undefined : json['RunInLimit'],
        'runOutLimit': !exists(json, 'RunOutLimit') ? undefined : json['RunOutLimit'],
        'remarks': !exists(json, 'Remarks') ? undefined : json['Remarks'],
        'markerColor': !exists(json, 'MarkerColor') ? undefined : json['MarkerColor'],
        'markerText': !exists(json, 'MarkerText') ? undefined : json['MarkerText'],
        'workType': !exists(json, 'WorkType') ? undefined : json['WorkType'],
    };
}

export function TRViSJsonTimetableRowToJSON(value?: TRViSJsonTimetableRow | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'StationName': value.stationName,
        'Location_m': value.locationM,
        'Longitude_deg': value.longitudeDeg,
        'Latitude_deg': value.latitudeDeg,
        'OnStationDetectRadius_m': value.onStationDetectRadiusM,
        'FullName': value.fullName,
        'RecordType': value.recordType,
        'TrackName': value.trackName,
        'DriveTime_MM': value.driveTimeMM,
        'DriveTime_SS': value.driveTimeSS,
        'IsOperationOnlyStop': value.isOperationOnlyStop,
        'IsPass': value.isPass,
        'HasBracket': value.hasBracket,
        'IsLastStop': value.isLastStop,
        'Arrive': value.arrive,
        'Departure': value.departure,
        'RunInLimit': value.runInLimit,
        'RunOutLimit': value.runOutLimit,
        'Remarks': value.remarks,
        'MarkerColor': value.markerColor,
        'MarkerText': value.markerText,
        'WorkType': value.workType,
    };
}

