/* tslint:disable */
/* eslint-disable */
/**
 * TRViS用 時刻表管理用API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TimetableRow
 */
export interface TimetableRow {
    /**
     * TimetableRowのID (UUID)
     * @type {string}
     * @memberof TimetableRow
     */
    readonly timetableRowsId?: string;
    /**
     * このデータが紐づいているTrainのID (UUID)
     * @type {string}
     * @memberof TimetableRow
     */
    readonly trainsId?: string;
    /**
     * この行の駅のID (UUID)
     * @type {string}
     * @memberof TimetableRow
     */
    stationsId?: string;
    /**
     * 駅の番線情報のID (UUID)
     * @type {string}
     * @memberof TimetableRow
     */
    stationTracksId?: string;
    /**
     * マーカーの色情報のID (UUID)
     * @type {string}
     * @memberof TimetableRow
     */
    colorsIdMarker?: string;
    /**
     * このTimetableRowの説明
     * @type {string}
     * @memberof TimetableRow
     */
    description?: string;
    /**
     * 作成日時
     * @type {Date}
     * @memberof TimetableRow
     */
    readonly createdAt?: Date;
    /**
     * 更新日時
     * @type {Date}
     * @memberof TimetableRow
     */
    readonly updatedAt?: Date;
    /**
     * 駅間運転時間 (分)
     * @type {number}
     * @memberof TimetableRow
     */
    driveTimeMm?: number;
    /**
     * 駅間運転時間 (秒)
     * @type {number}
     * @memberof TimetableRow
     */
    driveTimeSs?: number;
    /**
     * 運転停車かどうか
     * @type {boolean}
     * @memberof TimetableRow
     */
    isOperationOnlyStop?: boolean;
    /**
     * 通過駅かどうか
     * @type {boolean}
     * @memberof TimetableRow
     */
    isPass?: boolean;
    /**
     * 到着時刻に括弧を付けるかどうか
     * @type {boolean}
     * @memberof TimetableRow
     */
    hasBracket?: boolean;
    /**
     * 終着駅かどうか
     * @type {boolean}
     * @memberof TimetableRow
     */
    isLastStop?: boolean;
    /**
     * 到着時刻 (時)
     * @type {number}
     * @memberof TimetableRow
     */
    arriveTimeHh?: number;
    /**
     * 到着時刻 (分)
     * @type {number}
     * @memberof TimetableRow
     */
    arriveTimeMm?: number;
    /**
     * 到着時刻 (秒)
     * @type {number}
     * @memberof TimetableRow
     */
    arriveTimeSs?: number;
    /**
     * 出発時刻 (時)
     * @type {number}
     * @memberof TimetableRow
     */
    departureTimeHh?: number;
    /**
     * 出発時刻 (分)
     * @type {number}
     * @memberof TimetableRow
     */
    departureTimeMm?: number;
    /**
     * 出発時刻 (秒)
     * @type {number}
     * @memberof TimetableRow
     */
    departureTimeSs?: number;
    /**
     * 進入制限 (km/h)
     * @type {number}
     * @memberof TimetableRow
     */
    runInLimit?: number;
    /**
     * 進出制限 (km/h)
     * @type {number}
     * @memberof TimetableRow
     */
    runOutLimit?: number;
    /**
     * 注意事項
     * @type {string}
     * @memberof TimetableRow
     */
    remarks?: string;
    /**
     * 到着時刻欄に表示する文字列
     * @type {string}
     * @memberof TimetableRow
     */
    arriveStr?: string;
    /**
     * 出発時刻欄に表示する文字列
     * @type {string}
     * @memberof TimetableRow
     */
    departureStr?: string;
    /**
     * マーカー部分に表示する文字列
     * @type {string}
     * @memberof TimetableRow
     */
    markerText?: string;
    /**
     * 作業種別 (実装準備中)
     * @type {string}
     * @memberof TimetableRow
     */
    workType?: string;
}

/**
 * Check if a given object implements the TimetableRow interface.
 */
export function instanceOfTimetableRow(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TimetableRowFromJSON(json: any): TimetableRow {
    return TimetableRowFromJSONTyped(json, false);
}

export function TimetableRowFromJSONTyped(json: any, ignoreDiscriminator: boolean): TimetableRow {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'timetableRowsId': !exists(json, 'timetable_rows_id') ? undefined : json['timetable_rows_id'],
        'trainsId': !exists(json, 'trains_id') ? undefined : json['trains_id'],
        'stationsId': !exists(json, 'stations_id') ? undefined : json['stations_id'],
        'stationTracksId': !exists(json, 'station_tracks_id') ? undefined : json['station_tracks_id'],
        'colorsIdMarker': !exists(json, 'colors_id_marker') ? undefined : json['colors_id_marker'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
        'driveTimeMm': !exists(json, 'drive_time_mm') ? undefined : json['drive_time_mm'],
        'driveTimeSs': !exists(json, 'drive_time_ss') ? undefined : json['drive_time_ss'],
        'isOperationOnlyStop': !exists(json, 'is_operation_only_stop') ? undefined : json['is_operation_only_stop'],
        'isPass': !exists(json, 'is_pass') ? undefined : json['is_pass'],
        'hasBracket': !exists(json, 'has_bracket') ? undefined : json['has_bracket'],
        'isLastStop': !exists(json, 'is_last_stop') ? undefined : json['is_last_stop'],
        'arriveTimeHh': !exists(json, 'arrive_time_hh') ? undefined : json['arrive_time_hh'],
        'arriveTimeMm': !exists(json, 'arrive_time_mm') ? undefined : json['arrive_time_mm'],
        'arriveTimeSs': !exists(json, 'arrive_time_ss') ? undefined : json['arrive_time_ss'],
        'departureTimeHh': !exists(json, 'departure_time_hh') ? undefined : json['departure_time_hh'],
        'departureTimeMm': !exists(json, 'departure_time_mm') ? undefined : json['departure_time_mm'],
        'departureTimeSs': !exists(json, 'departure_time_ss') ? undefined : json['departure_time_ss'],
        'runInLimit': !exists(json, 'run_in_limit') ? undefined : json['run_in_limit'],
        'runOutLimit': !exists(json, 'run_out_limit') ? undefined : json['run_out_limit'],
        'remarks': !exists(json, 'remarks') ? undefined : json['remarks'],
        'arriveStr': !exists(json, 'arrive_str') ? undefined : json['arrive_str'],
        'departureStr': !exists(json, 'departure_str') ? undefined : json['departure_str'],
        'markerText': !exists(json, 'marker_text') ? undefined : json['marker_text'],
        'workType': !exists(json, 'work_type') ? undefined : json['work_type'],
    };
}

export function TimetableRowToJSON(value?: TimetableRow | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'stations_id': value.stationsId,
        'station_tracks_id': value.stationTracksId,
        'colors_id_marker': value.colorsIdMarker,
        'description': value.description,
        'drive_time_mm': value.driveTimeMm,
        'drive_time_ss': value.driveTimeSs,
        'is_operation_only_stop': value.isOperationOnlyStop,
        'is_pass': value.isPass,
        'has_bracket': value.hasBracket,
        'is_last_stop': value.isLastStop,
        'arrive_time_hh': value.arriveTimeHh,
        'arrive_time_mm': value.arriveTimeMm,
        'arrive_time_ss': value.arriveTimeSs,
        'departure_time_hh': value.departureTimeHh,
        'departure_time_mm': value.departureTimeMm,
        'departure_time_ss': value.departureTimeSs,
        'run_in_limit': value.runInLimit,
        'run_out_limit': value.runOutLimit,
        'remarks': value.remarks,
        'arrive_str': value.arriveStr,
        'departure_str': value.departureStr,
        'marker_text': value.markerText,
        'work_type': value.workType,
    };
}

