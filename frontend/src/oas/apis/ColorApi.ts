/* tslint:disable */
/* eslint-disable */
/**
 * TRViS用 時刻表管理用API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Color,
  Schema,
} from '../models/index';
import {
    ColorFromJSON,
    ColorToJSON,
    SchemaFromJSON,
    SchemaToJSON,
} from '../models/index';

export interface CreateColorRequest {
    workGroupId: string;
    color: Color;
}

export interface DeleteColorRequest {
    colorId: string;
}

export interface GetColorRequest {
    colorId: string;
}

export interface GetColorListRequest {
    workGroupId: string;
    p?: number;
    limit?: number;
    top?: string;
}

export interface UpdateColorRequest {
    colorId: string;
    color: Color;
}

/**
 * ColorApi - interface
 * 
 * @export
 * @interface ColorApiInterface
 */
export interface ColorApiInterface {
    /**
     * 指定のWorkGroupに属する Color (色) を新しく作成する  指定のWorkGroupへのWRITE権限が必要です。 
     * @summary 作成する
     * @param {string} workGroupId WorkGroupのID
     * @param {Color} color 作成するColorの情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColorApiInterface
     */
    createColorRaw(requestParameters: CreateColorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Color>>;

    /**
     * 指定のWorkGroupに属する Color (色) を新しく作成する  指定のWorkGroupへのWRITE権限が必要です。 
     * 作成する
     */
    createColor(requestParameters: CreateColorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Color>;

    /**
     * 既存のColorを削除する  指定のWorkGroupへのWRITE権限が必要です。 
     * @summary 削除する
     * @param {string} colorId ColorのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColorApiInterface
     */
    deleteColorRaw(requestParameters: DeleteColorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 既存のColorを削除する  指定のWorkGroupへのWRITE権限が必要です。 
     * 削除する
     */
    deleteColor(requestParameters: DeleteColorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Color (色) の情報を1件取得する  指定のWorkGroupへのREAD権限が必要です。 
     * @summary 1件取得する
     * @param {string} colorId ColorのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColorApiInterface
     */
    getColorRaw(requestParameters: GetColorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Color>>;

    /**
     * Color (色) の情報を1件取得する  指定のWorkGroupへのREAD権限が必要です。 
     * 1件取得する
     */
    getColor(requestParameters: GetColorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Color>;

    /**
     * 指定のWorkGroupに属するColor (色) の情報を複数件取得する  指定のWorkGroupへのREAD権限が必要です。 
     * @summary 複数件取得する
     * @param {string} workGroupId WorkGroupのID
     * @param {number} [p] ページングを行う場合のページ番号
     * @param {number} [limit] ページングを行う場合の1ページあたりの件数
     * @param {string} [top] ページングを行う場合の一番上に表示するID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColorApiInterface
     */
    getColorListRaw(requestParameters: GetColorListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Color>>>;

    /**
     * 指定のWorkGroupに属するColor (色) の情報を複数件取得する  指定のWorkGroupへのREAD権限が必要です。 
     * 複数件取得する
     */
    getColorList(requestParameters: GetColorListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Color>>;

    /**
     * 既存のColorの情報を更新する  指定のWorkGroupへのWRITE権限が必要です。 
     * @summary 更新する
     * @param {string} colorId ColorのID
     * @param {Color} color 更新後のColorの情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColorApiInterface
     */
    updateColorRaw(requestParameters: UpdateColorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Color>>;

    /**
     * 既存のColorの情報を更新する  指定のWorkGroupへのWRITE権限が必要です。 
     * 更新する
     */
    updateColor(requestParameters: UpdateColorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Color>;

}

/**
 * 
 */
export class ColorApi extends runtime.BaseAPI implements ColorApiInterface {

    /**
     * 指定のWorkGroupに属する Color (色) を新しく作成する  指定のWorkGroupへのWRITE権限が必要です。 
     * 作成する
     */
    async createColorRaw(requestParameters: CreateColorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Color>> {
        if (requestParameters.workGroupId === null || requestParameters.workGroupId === undefined) {
            throw new runtime.RequiredError('workGroupId','Required parameter requestParameters.workGroupId was null or undefined when calling createColor.');
        }

        if (requestParameters.color === null || requestParameters.color === undefined) {
            throw new runtime.RequiredError('color','Required parameter requestParameters.color was null or undefined when calling createColor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/work_groups/{workGroupId}/colors`.replace(`{${"workGroupId"}}`, encodeURIComponent(String(requestParameters.workGroupId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ColorToJSON(requestParameters.color),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ColorFromJSON(jsonValue));
    }

    /**
     * 指定のWorkGroupに属する Color (色) を新しく作成する  指定のWorkGroupへのWRITE権限が必要です。 
     * 作成する
     */
    async createColor(requestParameters: CreateColorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Color> {
        const response = await this.createColorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 既存のColorを削除する  指定のWorkGroupへのWRITE権限が必要です。 
     * 削除する
     */
    async deleteColorRaw(requestParameters: DeleteColorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.colorId === null || requestParameters.colorId === undefined) {
            throw new runtime.RequiredError('colorId','Required parameter requestParameters.colorId was null or undefined when calling deleteColor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/colors/{colorId}`.replace(`{${"colorId"}}`, encodeURIComponent(String(requestParameters.colorId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 既存のColorを削除する  指定のWorkGroupへのWRITE権限が必要です。 
     * 削除する
     */
    async deleteColor(requestParameters: DeleteColorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteColorRaw(requestParameters, initOverrides);
    }

    /**
     * Color (色) の情報を1件取得する  指定のWorkGroupへのREAD権限が必要です。 
     * 1件取得する
     */
    async getColorRaw(requestParameters: GetColorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Color>> {
        if (requestParameters.colorId === null || requestParameters.colorId === undefined) {
            throw new runtime.RequiredError('colorId','Required parameter requestParameters.colorId was null or undefined when calling getColor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/colors/{colorId}`.replace(`{${"colorId"}}`, encodeURIComponent(String(requestParameters.colorId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ColorFromJSON(jsonValue));
    }

    /**
     * Color (色) の情報を1件取得する  指定のWorkGroupへのREAD権限が必要です。 
     * 1件取得する
     */
    async getColor(requestParameters: GetColorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Color> {
        const response = await this.getColorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定のWorkGroupに属するColor (色) の情報を複数件取得する  指定のWorkGroupへのREAD権限が必要です。 
     * 複数件取得する
     */
    async getColorListRaw(requestParameters: GetColorListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Color>>> {
        if (requestParameters.workGroupId === null || requestParameters.workGroupId === undefined) {
            throw new runtime.RequiredError('workGroupId','Required parameter requestParameters.workGroupId was null or undefined when calling getColorList.');
        }

        const queryParameters: any = {};

        if (requestParameters.p !== undefined) {
            queryParameters['p'] = requestParameters.p;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/work_groups/{workGroupId}/colors`.replace(`{${"workGroupId"}}`, encodeURIComponent(String(requestParameters.workGroupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ColorFromJSON));
    }

    /**
     * 指定のWorkGroupに属するColor (色) の情報を複数件取得する  指定のWorkGroupへのREAD権限が必要です。 
     * 複数件取得する
     */
    async getColorList(requestParameters: GetColorListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Color>> {
        const response = await this.getColorListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 既存のColorの情報を更新する  指定のWorkGroupへのWRITE権限が必要です。 
     * 更新する
     */
    async updateColorRaw(requestParameters: UpdateColorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Color>> {
        if (requestParameters.colorId === null || requestParameters.colorId === undefined) {
            throw new runtime.RequiredError('colorId','Required parameter requestParameters.colorId was null or undefined when calling updateColor.');
        }

        if (requestParameters.color === null || requestParameters.color === undefined) {
            throw new runtime.RequiredError('color','Required parameter requestParameters.color was null or undefined when calling updateColor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/colors/{colorId}`.replace(`{${"colorId"}}`, encodeURIComponent(String(requestParameters.colorId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ColorToJSON(requestParameters.color),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ColorFromJSON(jsonValue));
    }

    /**
     * 既存のColorの情報を更新する  指定のWorkGroupへのWRITE権限が必要です。 
     * 更新する
     */
    async updateColor(requestParameters: UpdateColorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Color> {
        const response = await this.updateColorRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
