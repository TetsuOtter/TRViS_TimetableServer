/* tslint:disable */
/* eslint-disable */
/**
 * TRViS用 時刻表管理用API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Schema,
  StationTrack,
} from '../models/index';
import {
    SchemaFromJSON,
    SchemaToJSON,
    StationTrackFromJSON,
    StationTrackToJSON,
} from '../models/index';

export interface CreateStationTrackRequest {
    stationId: string;
    stationTrack: StationTrack;
}

export interface DeleteStationTrackRequest {
    stationTrackId: string;
}

export interface GetStationTrackRequest {
    stationTrackId: string;
}

export interface GetStationTrackListRequest {
    stationId: string;
    p?: number;
    limit?: number;
    top?: string;
}

export interface UpdateStationTrackRequest {
    stationTrackId: string;
    stationTrack: StationTrack;
}

/**
 * StationTrackApi - interface
 * 
 * @export
 * @interface StationTrackApiInterface
 */
export interface StationTrackApiInterface {
    /**
     * 指定のStationに属する StationTrack を新しく作成する  属するWorkGroupへのWRITE権限が必要です。 
     * @summary 作成する
     * @param {string} stationId StationのID
     * @param {StationTrack} stationTrack 作成するStationの情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationTrackApiInterface
     */
    createStationTrackRaw(requestParameters: CreateStationTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StationTrack>>;

    /**
     * 指定のStationに属する StationTrack を新しく作成する  属するWorkGroupへのWRITE権限が必要です。 
     * 作成する
     */
    createStationTrack(requestParameters: CreateStationTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StationTrack>;

    /**
     * 既存のStationTrackを削除する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * @summary 削除する
     * @param {string} stationTrackId Station TrackのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationTrackApiInterface
     */
    deleteStationTrackRaw(requestParameters: DeleteStationTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 既存のStationTrackを削除する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * 削除する
     */
    deleteStationTrack(requestParameters: DeleteStationTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * StationTrack (駅の番線) の情報を1件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * @summary 1件取得する
     * @param {string} stationTrackId Station TrackのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationTrackApiInterface
     */
    getStationTrackRaw(requestParameters: GetStationTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StationTrack>>;

    /**
     * StationTrack (駅の番線) の情報を1件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * 1件取得する
     */
    getStationTrack(requestParameters: GetStationTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StationTrack>;

    /**
     * 指定のStationに属するStationTrackの情報を複数件取得する  属するWorkGroupへのREAD権限が必要です。 
     * @summary 複数件取得する
     * @param {string} stationId StationのID
     * @param {number} [p] ページングを行う場合のページ番号
     * @param {number} [limit] ページングを行う場合の1ページあたりの件数
     * @param {string} [top] ページングを行う場合の一番上に表示するID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationTrackApiInterface
     */
    getStationTrackListRaw(requestParameters: GetStationTrackListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StationTrack>>>;

    /**
     * 指定のStationに属するStationTrackの情報を複数件取得する  属するWorkGroupへのREAD権限が必要です。 
     * 複数件取得する
     */
    getStationTrackList(requestParameters: GetStationTrackListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StationTrack>>;

    /**
     * 既存のStationTrackの情報を更新する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * @summary 更新する
     * @param {string} stationTrackId Station TrackのID
     * @param {StationTrack} stationTrack 更新後のStationの情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationTrackApiInterface
     */
    updateStationTrackRaw(requestParameters: UpdateStationTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StationTrack>>;

    /**
     * 既存のStationTrackの情報を更新する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 更新する
     */
    updateStationTrack(requestParameters: UpdateStationTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StationTrack>;

}

/**
 * 
 */
export class StationTrackApi extends runtime.BaseAPI implements StationTrackApiInterface {

    /**
     * 指定のStationに属する StationTrack を新しく作成する  属するWorkGroupへのWRITE権限が必要です。 
     * 作成する
     */
    async createStationTrackRaw(requestParameters: CreateStationTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StationTrack>> {
        if (requestParameters.stationId === null || requestParameters.stationId === undefined) {
            throw new runtime.RequiredError('stationId','Required parameter requestParameters.stationId was null or undefined when calling createStationTrack.');
        }

        if (requestParameters.stationTrack === null || requestParameters.stationTrack === undefined) {
            throw new runtime.RequiredError('stationTrack','Required parameter requestParameters.stationTrack was null or undefined when calling createStationTrack.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stations/{stationId}/tracks`.replace(`{${"stationId"}}`, encodeURIComponent(String(requestParameters.stationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StationTrackToJSON(requestParameters.stationTrack),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StationTrackFromJSON(jsonValue));
    }

    /**
     * 指定のStationに属する StationTrack を新しく作成する  属するWorkGroupへのWRITE権限が必要です。 
     * 作成する
     */
    async createStationTrack(requestParameters: CreateStationTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StationTrack> {
        const response = await this.createStationTrackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 既存のStationTrackを削除する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * 削除する
     */
    async deleteStationTrackRaw(requestParameters: DeleteStationTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stationTrackId === null || requestParameters.stationTrackId === undefined) {
            throw new runtime.RequiredError('stationTrackId','Required parameter requestParameters.stationTrackId was null or undefined when calling deleteStationTrack.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tracks/{stationTrackId}`.replace(`{${"stationTrackId"}}`, encodeURIComponent(String(requestParameters.stationTrackId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 既存のStationTrackを削除する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * 削除する
     */
    async deleteStationTrack(requestParameters: DeleteStationTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteStationTrackRaw(requestParameters, initOverrides);
    }

    /**
     * StationTrack (駅の番線) の情報を1件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * 1件取得する
     */
    async getStationTrackRaw(requestParameters: GetStationTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StationTrack>> {
        if (requestParameters.stationTrackId === null || requestParameters.stationTrackId === undefined) {
            throw new runtime.RequiredError('stationTrackId','Required parameter requestParameters.stationTrackId was null or undefined when calling getStationTrack.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tracks/{stationTrackId}`.replace(`{${"stationTrackId"}}`, encodeURIComponent(String(requestParameters.stationTrackId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StationTrackFromJSON(jsonValue));
    }

    /**
     * StationTrack (駅の番線) の情報を1件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * 1件取得する
     */
    async getStationTrack(requestParameters: GetStationTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StationTrack> {
        const response = await this.getStationTrackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定のStationに属するStationTrackの情報を複数件取得する  属するWorkGroupへのREAD権限が必要です。 
     * 複数件取得する
     */
    async getStationTrackListRaw(requestParameters: GetStationTrackListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StationTrack>>> {
        if (requestParameters.stationId === null || requestParameters.stationId === undefined) {
            throw new runtime.RequiredError('stationId','Required parameter requestParameters.stationId was null or undefined when calling getStationTrackList.');
        }

        const queryParameters: any = {};

        if (requestParameters.p !== undefined) {
            queryParameters['p'] = requestParameters.p;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/stations/{stationId}/tracks`.replace(`{${"stationId"}}`, encodeURIComponent(String(requestParameters.stationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StationTrackFromJSON));
    }

    /**
     * 指定のStationに属するStationTrackの情報を複数件取得する  属するWorkGroupへのREAD権限が必要です。 
     * 複数件取得する
     */
    async getStationTrackList(requestParameters: GetStationTrackListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StationTrack>> {
        const response = await this.getStationTrackListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 既存のStationTrackの情報を更新する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 更新する
     */
    async updateStationTrackRaw(requestParameters: UpdateStationTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StationTrack>> {
        if (requestParameters.stationTrackId === null || requestParameters.stationTrackId === undefined) {
            throw new runtime.RequiredError('stationTrackId','Required parameter requestParameters.stationTrackId was null or undefined when calling updateStationTrack.');
        }

        if (requestParameters.stationTrack === null || requestParameters.stationTrack === undefined) {
            throw new runtime.RequiredError('stationTrack','Required parameter requestParameters.stationTrack was null or undefined when calling updateStationTrack.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tracks/{stationTrackId}`.replace(`{${"stationTrackId"}}`, encodeURIComponent(String(requestParameters.stationTrackId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StationTrackToJSON(requestParameters.stationTrack),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StationTrackFromJSON(jsonValue));
    }

    /**
     * 既存のStationTrackの情報を更新する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 更新する
     */
    async updateStationTrack(requestParameters: UpdateStationTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StationTrack> {
        const response = await this.updateStationTrackRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
