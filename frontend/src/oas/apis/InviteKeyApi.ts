/* tslint:disable */
/* eslint-disable */
/**
 * TRViS用 時刻表管理用API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InviteKey,
  Schema,
  WorkGroup,
} from '../models/index';
import {
    InviteKeyFromJSON,
    InviteKeyToJSON,
    SchemaFromJSON,
    SchemaToJSON,
    WorkGroupFromJSON,
    WorkGroupToJSON,
} from '../models/index';

export interface CreateInviteKeyRequest {
    workGroupId: string;
    inviteKey: InviteKey;
}

export interface DeleteInviteKeyRequest {
    inviteKeyId: string;
}

export interface GetInviteKeyRequest {
    inviteKeyId: string;
}

export interface GetInviteKeyListRequest {
    workGroupId: string;
    p?: number;
    limit?: number;
    top?: string;
    expired?: boolean;
}

export interface GetMyInviteKeyListRequest {
    p?: number;
    limit?: number;
    top?: string;
    expired?: boolean;
}

export interface UpdateInviteKeyRequest {
    inviteKeyId: string;
    inviteKey: InviteKey;
}

export interface UseInviteKeyRequest {
    inviteKeyId: string;
}

/**
 * InviteKeyApi - interface
 * 
 * @export
 * @interface InviteKeyApiInterface
 */
export interface InviteKeyApiInterface {
    /**
     * 指定のWorkGroupに属する招待キーを新規に作成する  指定のWorkGroupへのADMIN権限が必要です。 
     * @summary 作成する
     * @param {string} workGroupId WorkGroupのID
     * @param {InviteKey} inviteKey 作成するInviteKeyの情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteKeyApiInterface
     */
    createInviteKeyRaw(requestParameters: CreateInviteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkGroup>>;

    /**
     * 指定のWorkGroupに属する招待キーを新規に作成する  指定のWorkGroupへのADMIN権限が必要です。 
     * 作成する
     */
    createInviteKey(requestParameters: CreateInviteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkGroup>;

    /**
     * 指定の招待キーを無効化する。  なお、この操作はキーが有効な間だけ行える。  指定のWorkGroupへのADMIN権限が必要です。 
     * @summary 無効化する
     * @param {string} inviteKeyId InviteKeyのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteKeyApiInterface
     */
    deleteInviteKeyRaw(requestParameters: DeleteInviteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 指定の招待キーを無効化する。  なお、この操作はキーが有効な間だけ行える。  指定のWorkGroupへのADMIN権限が必要です。 
     * 無効化する
     */
    deleteInviteKey(requestParameters: DeleteInviteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 招待キーの情報を1件取得する  削除された招待キーは取得できませんが、無効化された招待キーは取得できます。 
     * @summary 1件取得する
     * @param {string} inviteKeyId InviteKeyのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteKeyApiInterface
     */
    getInviteKeyRaw(requestParameters: GetInviteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InviteKey>>;

    /**
     * 招待キーの情報を1件取得する  削除された招待キーは取得できませんが、無効化された招待キーは取得できます。 
     * 1件取得する
     */
    getInviteKey(requestParameters: GetInviteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InviteKey>;

    /**
     * 指定のWorkGroupに属する招待キーの一覧を取得する  指定のWorkGroupへのADMIN権限が必要です。 
     * @summary 一覧を取得する
     * @param {string} workGroupId WorkGroupのID
     * @param {number} [p] ページングを行う場合のページ番号
     * @param {number} [limit] ページングを行う場合の1ページあたりの件数
     * @param {string} [top] ページングを行う場合の一番上に表示するID
     * @param {boolean} [expired] 有効期限切れの (および、無効な) 招待キーを含めるかどうか   (&#x60;?expired&#x60;だけ、または&#x60;?expired&#x3D;&#x60;の場合は&#x60;true&#x60;と同じ。それ以外は&#x60;?expired&#x3D;true&#x60;の場合のみ&#x60;true&#x60;となる) 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteKeyApiInterface
     */
    getInviteKeyListRaw(requestParameters: GetInviteKeyListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InviteKey>>>;

    /**
     * 指定のWorkGroupに属する招待キーの一覧を取得する  指定のWorkGroupへのADMIN権限が必要です。 
     * 一覧を取得する
     */
    getInviteKeyList(requestParameters: GetInviteKeyListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InviteKey>>;

    /**
     * 自身が作成した (オーナーな) 招待キーの一覧を取得する  実行にはサインインが必要です。 
     * @summary 一覧を取得する
     * @param {number} [p] ページングを行う場合のページ番号
     * @param {number} [limit] ページングを行う場合の1ページあたりの件数
     * @param {string} [top] ページングを行う場合の一番上に表示するID
     * @param {boolean} [expired] 有効期限切れの (および、無効な) 招待キーを含めるかどうか   (&#x60;?expired&#x60;だけ、または&#x60;?expired&#x3D;&#x60;の場合は&#x60;true&#x60;と同じ。それ以外は&#x60;?expired&#x3D;true&#x60;の場合のみ&#x60;true&#x60;となる) 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteKeyApiInterface
     */
    getMyInviteKeyListRaw(requestParameters: GetMyInviteKeyListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InviteKey>>>;

    /**
     * 自身が作成した (オーナーな) 招待キーの一覧を取得する  実行にはサインインが必要です。 
     * 一覧を取得する
     */
    getMyInviteKeyList(requestParameters: GetMyInviteKeyListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InviteKey>>;

    /**
     * 既存の招待キーを更新する  指定のWorkGroupへのADMIN権限が必要です。 
     * @summary (未実装) 更新する
     * @param {string} inviteKeyId InviteKeyのID
     * @param {InviteKey} inviteKey 更新後のInviteKeyの情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteKeyApiInterface
     */
    updateInviteKeyRaw(requestParameters: UpdateInviteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InviteKey>>;

    /**
     * 既存の招待キーを更新する  指定のWorkGroupへのADMIN権限が必要です。 
     * (未実装) 更新する
     */
    updateInviteKey(requestParameters: UpdateInviteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InviteKey>;

    /**
     * 招待キーを使用する  サインインが必須です。サインインしたユーザに対して、この招待キーに割り当てられた権限が付与されます。 
     * @summary 使用する
     * @param {string} inviteKeyId InviteKeyのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteKeyApiInterface
     */
    useInviteKeyRaw(requestParameters: UseInviteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkGroup>>;

    /**
     * 招待キーを使用する  サインインが必須です。サインインしたユーザに対して、この招待キーに割り当てられた権限が付与されます。 
     * 使用する
     */
    useInviteKey(requestParameters: UseInviteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkGroup>;

}

/**
 * 
 */
export class InviteKeyApi extends runtime.BaseAPI implements InviteKeyApiInterface {

    /**
     * 指定のWorkGroupに属する招待キーを新規に作成する  指定のWorkGroupへのADMIN権限が必要です。 
     * 作成する
     */
    async createInviteKeyRaw(requestParameters: CreateInviteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkGroup>> {
        if (requestParameters.workGroupId === null || requestParameters.workGroupId === undefined) {
            throw new runtime.RequiredError('workGroupId','Required parameter requestParameters.workGroupId was null or undefined when calling createInviteKey.');
        }

        if (requestParameters.inviteKey === null || requestParameters.inviteKey === undefined) {
            throw new runtime.RequiredError('inviteKey','Required parameter requestParameters.inviteKey was null or undefined when calling createInviteKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/work_groups/{workGroupId}/invite_keys`.replace(`{${"workGroupId"}}`, encodeURIComponent(String(requestParameters.workGroupId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InviteKeyToJSON(requestParameters.inviteKey),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkGroupFromJSON(jsonValue));
    }

    /**
     * 指定のWorkGroupに属する招待キーを新規に作成する  指定のWorkGroupへのADMIN権限が必要です。 
     * 作成する
     */
    async createInviteKey(requestParameters: CreateInviteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkGroup> {
        const response = await this.createInviteKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定の招待キーを無効化する。  なお、この操作はキーが有効な間だけ行える。  指定のWorkGroupへのADMIN権限が必要です。 
     * 無効化する
     */
    async deleteInviteKeyRaw(requestParameters: DeleteInviteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.inviteKeyId === null || requestParameters.inviteKeyId === undefined) {
            throw new runtime.RequiredError('inviteKeyId','Required parameter requestParameters.inviteKeyId was null or undefined when calling deleteInviteKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/invite_keys/{inviteKeyId}`.replace(`{${"inviteKeyId"}}`, encodeURIComponent(String(requestParameters.inviteKeyId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 指定の招待キーを無効化する。  なお、この操作はキーが有効な間だけ行える。  指定のWorkGroupへのADMIN権限が必要です。 
     * 無効化する
     */
    async deleteInviteKey(requestParameters: DeleteInviteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteInviteKeyRaw(requestParameters, initOverrides);
    }

    /**
     * 招待キーの情報を1件取得する  削除された招待キーは取得できませんが、無効化された招待キーは取得できます。 
     * 1件取得する
     */
    async getInviteKeyRaw(requestParameters: GetInviteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InviteKey>> {
        if (requestParameters.inviteKeyId === null || requestParameters.inviteKeyId === undefined) {
            throw new runtime.RequiredError('inviteKeyId','Required parameter requestParameters.inviteKeyId was null or undefined when calling getInviteKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/invite_keys/{inviteKeyId}`.replace(`{${"inviteKeyId"}}`, encodeURIComponent(String(requestParameters.inviteKeyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InviteKeyFromJSON(jsonValue));
    }

    /**
     * 招待キーの情報を1件取得する  削除された招待キーは取得できませんが、無効化された招待キーは取得できます。 
     * 1件取得する
     */
    async getInviteKey(requestParameters: GetInviteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InviteKey> {
        const response = await this.getInviteKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 指定のWorkGroupに属する招待キーの一覧を取得する  指定のWorkGroupへのADMIN権限が必要です。 
     * 一覧を取得する
     */
    async getInviteKeyListRaw(requestParameters: GetInviteKeyListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InviteKey>>> {
        if (requestParameters.workGroupId === null || requestParameters.workGroupId === undefined) {
            throw new runtime.RequiredError('workGroupId','Required parameter requestParameters.workGroupId was null or undefined when calling getInviteKeyList.');
        }

        const queryParameters: any = {};

        if (requestParameters.p !== undefined) {
            queryParameters['p'] = requestParameters.p;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.expired !== undefined) {
            queryParameters['expired'] = requestParameters.expired;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/work_groups/{workGroupId}/invite_keys`.replace(`{${"workGroupId"}}`, encodeURIComponent(String(requestParameters.workGroupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InviteKeyFromJSON));
    }

    /**
     * 指定のWorkGroupに属する招待キーの一覧を取得する  指定のWorkGroupへのADMIN権限が必要です。 
     * 一覧を取得する
     */
    async getInviteKeyList(requestParameters: GetInviteKeyListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InviteKey>> {
        const response = await this.getInviteKeyListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 自身が作成した (オーナーな) 招待キーの一覧を取得する  実行にはサインインが必要です。 
     * 一覧を取得する
     */
    async getMyInviteKeyListRaw(requestParameters: GetMyInviteKeyListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InviteKey>>> {
        const queryParameters: any = {};

        if (requestParameters.p !== undefined) {
            queryParameters['p'] = requestParameters.p;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        if (requestParameters.expired !== undefined) {
            queryParameters['expired'] = requestParameters.expired;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/invite_keys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InviteKeyFromJSON));
    }

    /**
     * 自身が作成した (オーナーな) 招待キーの一覧を取得する  実行にはサインインが必要です。 
     * 一覧を取得する
     */
    async getMyInviteKeyList(requestParameters: GetMyInviteKeyListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InviteKey>> {
        const response = await this.getMyInviteKeyListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 既存の招待キーを更新する  指定のWorkGroupへのADMIN権限が必要です。 
     * (未実装) 更新する
     */
    async updateInviteKeyRaw(requestParameters: UpdateInviteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InviteKey>> {
        if (requestParameters.inviteKeyId === null || requestParameters.inviteKeyId === undefined) {
            throw new runtime.RequiredError('inviteKeyId','Required parameter requestParameters.inviteKeyId was null or undefined when calling updateInviteKey.');
        }

        if (requestParameters.inviteKey === null || requestParameters.inviteKey === undefined) {
            throw new runtime.RequiredError('inviteKey','Required parameter requestParameters.inviteKey was null or undefined when calling updateInviteKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/invite_keys/{inviteKeyId}`.replace(`{${"inviteKeyId"}}`, encodeURIComponent(String(requestParameters.inviteKeyId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InviteKeyToJSON(requestParameters.inviteKey),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InviteKeyFromJSON(jsonValue));
    }

    /**
     * 既存の招待キーを更新する  指定のWorkGroupへのADMIN権限が必要です。 
     * (未実装) 更新する
     */
    async updateInviteKey(requestParameters: UpdateInviteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InviteKey> {
        const response = await this.updateInviteKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 招待キーを使用する  サインインが必須です。サインインしたユーザに対して、この招待キーに割り当てられた権限が付与されます。 
     * 使用する
     */
    async useInviteKeyRaw(requestParameters: UseInviteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkGroup>> {
        if (requestParameters.inviteKeyId === null || requestParameters.inviteKeyId === undefined) {
            throw new runtime.RequiredError('inviteKeyId','Required parameter requestParameters.inviteKeyId was null or undefined when calling useInviteKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/invite_keys/{inviteKeyId}`.replace(`{${"inviteKeyId"}}`, encodeURIComponent(String(requestParameters.inviteKeyId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkGroupFromJSON(jsonValue));
    }

    /**
     * 招待キーを使用する  サインインが必須です。サインインしたユーザに対して、この招待キーに割り当てられた権限が付与されます。 
     * 使用する
     */
    async useInviteKey(requestParameters: UseInviteKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkGroup> {
        const response = await this.useInviteKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
