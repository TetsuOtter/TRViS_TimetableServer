/* tslint:disable */
/* eslint-disable */
/**
 * TRViS用 時刻表管理用API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Schema,
  WorkGroup,
  WorkGroupsPrivilege,
} from '../models/index';
import {
    SchemaFromJSON,
    SchemaToJSON,
    WorkGroupFromJSON,
    WorkGroupToJSON,
    WorkGroupsPrivilegeFromJSON,
    WorkGroupsPrivilegeToJSON,
} from '../models/index';

export interface CreateWorkGroupRequest {
    workGroup: WorkGroup;
}

export interface DeleteWorkGroupRequest {
    workGroupId: string;
}

export interface GetPrivilegeRequest {
    workGroupId: string;
    uid?: string;
    uidAnonymous?: boolean;
}

export interface GetWorkGroupRequest {
    workGroupId: string;
}

export interface GetWorkGroupListRequest {
    p?: number;
    limit?: number;
    top?: string;
}

export interface UpdatePrivilegeRequest {
    workGroupId: string;
    workGroupsPrivilege: WorkGroupsPrivilege;
    uid?: string;
    uidAnonymous?: boolean;
}

export interface UpdateWorkGroupRequest {
    workGroupId: string;
    workGroup: WorkGroup;
}

/**
 * WorkGroupApi - interface
 * 
 * @export
 * @interface WorkGroupApiInterface
 */
export interface WorkGroupApiInterface {
    /**
     * Workのまとまり (WorkGroup) を新しく作成する  この操作にはサインインが必要です。 
     * @summary 作成する
     * @param {WorkGroup} workGroup 作成するWorkGroupの情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkGroupApiInterface
     */
    createWorkGroupRaw(requestParameters: CreateWorkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkGroup>>;

    /**
     * Workのまとまり (WorkGroup) を新しく作成する  この操作にはサインインが必要です。 
     * 作成する
     */
    createWorkGroup(requestParameters: CreateWorkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkGroup>;

    /**
     * 既存の「Workのまとまり (WorkGroup)」を削除する  このデータが属するWorkGroupへのADMIN権限が必要です。 
     * @summary 削除する
     * @param {string} workGroupId WorkGroupのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkGroupApiInterface
     */
    deleteWorkGroupRaw(requestParameters: DeleteWorkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 既存の「Workのまとまり (WorkGroup)」を削除する  このデータが属するWorkGroupへのADMIN権限が必要です。 
     * 削除する
     */
    deleteWorkGroup(requestParameters: DeleteWorkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * このWorkGroupに関する自身の権限を取得する。  管理者の場合は、指定のユーザの権限を取得することも可能。 
     * @summary 権限情報を取得する
     * @param {string} workGroupId WorkGroupのID
     * @param {string} [uid] ユーザのID
     * @param {boolean} [uidAnonymous] 匿名ユーザ・すべてのユーザに対する操作か  &#x60;uid&#x60; が指定された場合、そちらが優先される 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkGroupApiInterface
     */
    getPrivilegeRaw(requestParameters: GetPrivilegeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkGroupsPrivilege>>;

    /**
     * このWorkGroupに関する自身の権限を取得する。  管理者の場合は、指定のユーザの権限を取得することも可能。 
     * 権限情報を取得する
     */
    getPrivilege(requestParameters: GetPrivilegeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkGroupsPrivilege>;

    /**
     * Workのまとまり (WorkGroup) の情報を1件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * @summary 1件取得する
     * @param {string} workGroupId WorkGroupのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkGroupApiInterface
     */
    getWorkGroupRaw(requestParameters: GetWorkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkGroup>>;

    /**
     * Workのまとまり (WorkGroup) の情報を1件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * 1件取得する
     */
    getWorkGroup(requestParameters: GetWorkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkGroup>;

    /**
     * 自身が取得できるWorkのまとまり (WorkGroup) の情報を複数件取得する 
     * @summary 複数件取得する
     * @param {number} [p] ページングを行う場合のページ番号
     * @param {number} [limit] ページングを行う場合の1ページあたりの件数
     * @param {string} [top] ページングを行う場合の一番上に表示するID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkGroupApiInterface
     */
    getWorkGroupListRaw(requestParameters: GetWorkGroupListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkGroup>>>;

    /**
     * 自身が取得できるWorkのまとまり (WorkGroup) の情報を複数件取得する 
     * 複数件取得する
     */
    getWorkGroupList(requestParameters: GetWorkGroupListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkGroup>>;

    /**
     * このWorkGroupに対する自身の権限を更新する。(現在の権限以下の権限のみ設定可能)  管理者の場合は、指定のユーザの権限を追加・更新することも可能。(invite_key_idはNULLになります) 
     * @summary 権限を更新する
     * @param {string} workGroupId WorkGroupのID
     * @param {WorkGroupsPrivilege} workGroupsPrivilege 更新後の権限情報
     * @param {string} [uid] ユーザのID
     * @param {boolean} [uidAnonymous] 匿名ユーザ・すべてのユーザに対する操作か  &#x60;uid&#x60; が指定された場合、そちらが優先される 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkGroupApiInterface
     */
    updatePrivilegeRaw(requestParameters: UpdatePrivilegeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkGroupsPrivilege>>;

    /**
     * このWorkGroupに対する自身の権限を更新する。(現在の権限以下の権限のみ設定可能)  管理者の場合は、指定のユーザの権限を追加・更新することも可能。(invite_key_idはNULLになります) 
     * 権限を更新する
     */
    updatePrivilege(requestParameters: UpdatePrivilegeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkGroupsPrivilege>;

    /**
     * 既存の「Workのまとまり (WorkGroup)」を更新する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * @summary 更新する
     * @param {string} workGroupId WorkGroupのID
     * @param {WorkGroup} workGroup 作成するWorkGroupの情報
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkGroupApiInterface
     */
    updateWorkGroupRaw(requestParameters: UpdateWorkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkGroup>>;

    /**
     * 既存の「Workのまとまり (WorkGroup)」を更新する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 更新する
     */
    updateWorkGroup(requestParameters: UpdateWorkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkGroup>;

}

/**
 * 
 */
export class WorkGroupApi extends runtime.BaseAPI implements WorkGroupApiInterface {

    /**
     * Workのまとまり (WorkGroup) を新しく作成する  この操作にはサインインが必要です。 
     * 作成する
     */
    async createWorkGroupRaw(requestParameters: CreateWorkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkGroup>> {
        if (requestParameters.workGroup === null || requestParameters.workGroup === undefined) {
            throw new runtime.RequiredError('workGroup','Required parameter requestParameters.workGroup was null or undefined when calling createWorkGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/work_groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkGroupToJSON(requestParameters.workGroup),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkGroupFromJSON(jsonValue));
    }

    /**
     * Workのまとまり (WorkGroup) を新しく作成する  この操作にはサインインが必要です。 
     * 作成する
     */
    async createWorkGroup(requestParameters: CreateWorkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkGroup> {
        const response = await this.createWorkGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 既存の「Workのまとまり (WorkGroup)」を削除する  このデータが属するWorkGroupへのADMIN権限が必要です。 
     * 削除する
     */
    async deleteWorkGroupRaw(requestParameters: DeleteWorkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.workGroupId === null || requestParameters.workGroupId === undefined) {
            throw new runtime.RequiredError('workGroupId','Required parameter requestParameters.workGroupId was null or undefined when calling deleteWorkGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/work_groups/{workGroupId}`.replace(`{${"workGroupId"}}`, encodeURIComponent(String(requestParameters.workGroupId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 既存の「Workのまとまり (WorkGroup)」を削除する  このデータが属するWorkGroupへのADMIN権限が必要です。 
     * 削除する
     */
    async deleteWorkGroup(requestParameters: DeleteWorkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWorkGroupRaw(requestParameters, initOverrides);
    }

    /**
     * このWorkGroupに関する自身の権限を取得する。  管理者の場合は、指定のユーザの権限を取得することも可能。 
     * 権限情報を取得する
     */
    async getPrivilegeRaw(requestParameters: GetPrivilegeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkGroupsPrivilege>> {
        if (requestParameters.workGroupId === null || requestParameters.workGroupId === undefined) {
            throw new runtime.RequiredError('workGroupId','Required parameter requestParameters.workGroupId was null or undefined when calling getPrivilege.');
        }

        const queryParameters: any = {};

        if (requestParameters.uid !== undefined) {
            queryParameters['uid'] = requestParameters.uid;
        }

        if (requestParameters.uidAnonymous !== undefined) {
            queryParameters['uid-anonymous'] = requestParameters.uidAnonymous;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/work_groups/{workGroupId}/privileges`.replace(`{${"workGroupId"}}`, encodeURIComponent(String(requestParameters.workGroupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkGroupsPrivilegeFromJSON(jsonValue));
    }

    /**
     * このWorkGroupに関する自身の権限を取得する。  管理者の場合は、指定のユーザの権限を取得することも可能。 
     * 権限情報を取得する
     */
    async getPrivilege(requestParameters: GetPrivilegeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkGroupsPrivilege> {
        const response = await this.getPrivilegeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Workのまとまり (WorkGroup) の情報を1件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * 1件取得する
     */
    async getWorkGroupRaw(requestParameters: GetWorkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkGroup>> {
        if (requestParameters.workGroupId === null || requestParameters.workGroupId === undefined) {
            throw new runtime.RequiredError('workGroupId','Required parameter requestParameters.workGroupId was null or undefined when calling getWorkGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/work_groups/{workGroupId}`.replace(`{${"workGroupId"}}`, encodeURIComponent(String(requestParameters.workGroupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkGroupFromJSON(jsonValue));
    }

    /**
     * Workのまとまり (WorkGroup) の情報を1件取得する  このデータが属するWorkGroupへのREAD権限が必要です。 
     * 1件取得する
     */
    async getWorkGroup(requestParameters: GetWorkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkGroup> {
        const response = await this.getWorkGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 自身が取得できるWorkのまとまり (WorkGroup) の情報を複数件取得する 
     * 複数件取得する
     */
    async getWorkGroupListRaw(requestParameters: GetWorkGroupListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkGroup>>> {
        const queryParameters: any = {};

        if (requestParameters.p !== undefined) {
            queryParameters['p'] = requestParameters.p;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/work_groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkGroupFromJSON));
    }

    /**
     * 自身が取得できるWorkのまとまり (WorkGroup) の情報を複数件取得する 
     * 複数件取得する
     */
    async getWorkGroupList(requestParameters: GetWorkGroupListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkGroup>> {
        const response = await this.getWorkGroupListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * このWorkGroupに対する自身の権限を更新する。(現在の権限以下の権限のみ設定可能)  管理者の場合は、指定のユーザの権限を追加・更新することも可能。(invite_key_idはNULLになります) 
     * 権限を更新する
     */
    async updatePrivilegeRaw(requestParameters: UpdatePrivilegeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkGroupsPrivilege>> {
        if (requestParameters.workGroupId === null || requestParameters.workGroupId === undefined) {
            throw new runtime.RequiredError('workGroupId','Required parameter requestParameters.workGroupId was null or undefined when calling updatePrivilege.');
        }

        if (requestParameters.workGroupsPrivilege === null || requestParameters.workGroupsPrivilege === undefined) {
            throw new runtime.RequiredError('workGroupsPrivilege','Required parameter requestParameters.workGroupsPrivilege was null or undefined when calling updatePrivilege.');
        }

        const queryParameters: any = {};

        if (requestParameters.uid !== undefined) {
            queryParameters['uid'] = requestParameters.uid;
        }

        if (requestParameters.uidAnonymous !== undefined) {
            queryParameters['uid-anonymous'] = requestParameters.uidAnonymous;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/work_groups/{workGroupId}/privileges`.replace(`{${"workGroupId"}}`, encodeURIComponent(String(requestParameters.workGroupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WorkGroupsPrivilegeToJSON(requestParameters.workGroupsPrivilege),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkGroupsPrivilegeFromJSON(jsonValue));
    }

    /**
     * このWorkGroupに対する自身の権限を更新する。(現在の権限以下の権限のみ設定可能)  管理者の場合は、指定のユーザの権限を追加・更新することも可能。(invite_key_idはNULLになります) 
     * 権限を更新する
     */
    async updatePrivilege(requestParameters: UpdatePrivilegeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkGroupsPrivilege> {
        const response = await this.updatePrivilegeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 既存の「Workのまとまり (WorkGroup)」を更新する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 更新する
     */
    async updateWorkGroupRaw(requestParameters: UpdateWorkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkGroup>> {
        if (requestParameters.workGroupId === null || requestParameters.workGroupId === undefined) {
            throw new runtime.RequiredError('workGroupId','Required parameter requestParameters.workGroupId was null or undefined when calling updateWorkGroup.');
        }

        if (requestParameters.workGroup === null || requestParameters.workGroup === undefined) {
            throw new runtime.RequiredError('workGroup','Required parameter requestParameters.workGroup was null or undefined when calling updateWorkGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/work_groups/{workGroupId}`.replace(`{${"workGroupId"}}`, encodeURIComponent(String(requestParameters.workGroupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WorkGroupToJSON(requestParameters.workGroup),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkGroupFromJSON(jsonValue));
    }

    /**
     * 既存の「Workのまとまり (WorkGroup)」を更新する  このデータが属するWorkGroupへのWRITE権限が必要です。 
     * 更新する
     */
    async updateWorkGroup(requestParameters: UpdateWorkGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkGroup> {
        const response = await this.updateWorkGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
